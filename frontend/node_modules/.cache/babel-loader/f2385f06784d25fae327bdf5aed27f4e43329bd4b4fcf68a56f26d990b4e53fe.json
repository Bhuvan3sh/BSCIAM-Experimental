{"ast":null,"code":"var _jsxFileName = \"F:\\\\Final Year Project\\\\Project Implementation\\\\frontend\\\\src\\\\context\\\\WalletContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WalletContext = /*#__PURE__*/createContext(undefined);\nexport const WalletProvider = ({\n  children\n}) => {\n  _s();\n  const [state, setState] = useState({\n    wallet: {\n      isConnected: false,\n      account: null,\n      chainId: null,\n      balance: null\n    },\n    userProfile: null,\n    isRegistered: false,\n    isLoading: false,\n    error: null\n  });\n  const [provider, setProvider] = useState(null);\n  const [signer, setSigner] = useState(null);\n  useEffect(() => {\n    const initWallet = async () => {\n      if (typeof window.ethereum !== 'undefined') {\n        const newProvider = new ethers.BrowserProvider(window.ethereum);\n        setProvider(newProvider);\n\n        // Check if already connected\n        try {\n          const accounts = await window.ethereum.request({\n            method: 'eth_accounts'\n          });\n          if (accounts.length > 0) {\n            await connectWallet();\n          }\n        } catch (error) {\n          console.error('Error checking existing connection:', error);\n        }\n\n        // Listen for account changes\n        window.ethereum.on('accountsChanged', handleAccountsChanged);\n        window.ethereum.on('chainChanged', handleChainChanged);\n      }\n    };\n    initWallet();\n    return () => {\n      if (window.ethereum) {\n        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n        window.ethereum.removeListener('chainChanged', handleChainChanged);\n      }\n    };\n  }, []);\n  const handleAccountsChanged = accounts => {\n    if (accounts.length === 0) {\n      disconnectWallet();\n    } else {\n      connectWallet();\n    }\n  };\n  const handleChainChanged = () => {\n    window.location.reload();\n  };\n  const connectWallet = async () => {\n    try {\n      setState(prev => ({\n        ...prev,\n        isLoading: true,\n        error: null\n      }));\n      if (typeof window.ethereum === 'undefined') {\n        throw new Error('MetaMask is not installed');\n      }\n      const newProvider = new ethers.BrowserProvider(window.ethereum);\n      setProvider(newProvider);\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      if (accounts.length === 0) {\n        throw new Error('No accounts found');\n      }\n      const newSigner = await newProvider.getSigner();\n      setSigner(newSigner);\n      const network = await newProvider.getNetwork();\n      const balance = await newProvider.getBalance(accounts[0]);\n      setState(prev => ({\n        ...prev,\n        wallet: {\n          isConnected: true,\n          account: accounts[0],\n          chainId: network.chainId.toString(),\n          balance: ethers.formatEther(balance)\n        },\n        isLoading: false\n      }));\n\n      // Check if user is registered\n      await checkRegistration();\n    } catch (error) {\n      setState(prev => ({\n        ...prev,\n        isLoading: false,\n        error: error.message || 'Failed to connect wallet'\n      }));\n    }\n  };\n  const disconnectWallet = () => {\n    setState({\n      wallet: {\n        isConnected: false,\n        account: null,\n        chainId: null,\n        balance: null\n      },\n      userProfile: null,\n      isRegistered: false,\n      isLoading: false,\n      error: null\n    });\n    setProvider(null);\n    setSigner(null);\n  };\n  const checkRegistration = async () => {\n    if (!provider || !state.wallet.account) return false;\n    try {\n      // This would be implemented with actual contract calls\n      // For now, we'll simulate it\n      const isRegistered = localStorage.getItem(`registered_${state.wallet.account}`) === 'true';\n      setState(prev => ({\n        ...prev,\n        isRegistered\n      }));\n      return isRegistered;\n    } catch (error) {\n      console.error('Error checking registration:', error);\n      return false;\n    }\n  };\n  const registerUser = async (username, email) => {\n    if (!provider || !signer || !state.wallet.account) {\n      throw new Error('Wallet not connected');\n    }\n    try {\n      setState(prev => ({\n        ...prev,\n        isLoading: true,\n        error: null\n      }));\n\n      // This would be implemented with actual contract calls\n      // For now, we'll simulate registration\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      localStorage.setItem(`registered_${state.wallet.account}`, 'true');\n      const userProfile = {\n        walletAddress: state.wallet.account,\n        username,\n        email,\n        registrationTime: new Date().toISOString(),\n        isActive: true,\n        reputationScore: 100,\n        accessRoles: []\n      };\n      setState(prev => ({\n        ...prev,\n        userProfile,\n        isRegistered: true,\n        isLoading: false\n      }));\n    } catch (error) {\n      setState(prev => ({\n        ...prev,\n        isLoading: false,\n        error: error.message || 'Registration failed'\n      }));\n      throw error;\n    }\n  };\n  const value = {\n    state,\n    connectWallet,\n    disconnectWallet,\n    checkRegistration,\n    registerUser\n  };\n  return /*#__PURE__*/_jsxDEV(WalletContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 213,\n    columnNumber: 5\n  }, this);\n};\n_s(WalletProvider, \"aMxUtZ67bO+lF7gBQr+x0HHfkDU=\");\n_c = WalletProvider;\nexport const useWallet = () => {\n  _s2();\n  const context = useContext(WalletContext);\n  if (context === undefined) {\n    throw new Error('useWallet must be used within a WalletProvider');\n  }\n  return context;\n};\n\n// Extend Window interface for TypeScript\n_s2(useWallet, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"WalletProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","ethers","jsxDEV","_jsxDEV","WalletContext","undefined","WalletProvider","children","_s","state","setState","wallet","isConnected","account","chainId","balance","userProfile","isRegistered","isLoading","error","provider","setProvider","signer","setSigner","initWallet","window","ethereum","newProvider","BrowserProvider","accounts","request","method","length","connectWallet","console","on","handleAccountsChanged","handleChainChanged","removeListener","disconnectWallet","location","reload","prev","Error","newSigner","getSigner","network","getNetwork","getBalance","toString","formatEther","checkRegistration","message","localStorage","getItem","registerUser","username","email","Promise","resolve","setTimeout","setItem","walletAddress","registrationTime","Date","toISOString","isActive","reputationScore","accessRoles","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useWallet","_s2","context","$RefreshReg$"],"sources":["F:/Final Year Project/Project Implementation/frontend/src/context/WalletContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\r\nimport { ethers } from 'ethers';\r\nimport { WalletState, AppState, UserProfile } from '../types';\r\n\r\ninterface WalletContextType {\r\n  state: AppState;\r\n  connectWallet: () => Promise<void>;\r\n  disconnectWallet: () => void;\r\n  checkRegistration: () => Promise<boolean>;\r\n  registerUser: (username: string, email: string) => Promise<void>;\r\n}\r\n\r\nconst WalletContext = createContext<WalletContextType | undefined>(undefined);\r\n\r\ninterface WalletProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const WalletProvider: React.FC<WalletProviderProps> = ({ children }) => {\r\n  const [state, setState] = useState<AppState>({\r\n    wallet: {\r\n      isConnected: false,\r\n      account: null,\r\n      chainId: null,\r\n      balance: null,\r\n    },\r\n    userProfile: null,\r\n    isRegistered: false,\r\n    isLoading: false,\r\n    error: null,\r\n  });\r\n\r\n  const [provider, setProvider] = useState<ethers.BrowserProvider | null>(null);\r\n  const [signer, setSigner] = useState<ethers.JsonRpcSigner | null>(null);\r\n\r\n  useEffect(() => {\r\n    const initWallet = async () => {\r\n      if (typeof window.ethereum !== 'undefined') {\r\n        const newProvider = new ethers.BrowserProvider(window.ethereum);\r\n        setProvider(newProvider);\r\n\r\n        // Check if already connected\r\n        try {\r\n          const accounts = await window.ethereum.request({ method: 'eth_accounts' });\r\n          if (accounts.length > 0) {\r\n            await connectWallet();\r\n          }\r\n        } catch (error) {\r\n          console.error('Error checking existing connection:', error);\r\n        }\r\n\r\n        // Listen for account changes\r\n        window.ethereum.on('accountsChanged', handleAccountsChanged);\r\n        window.ethereum.on('chainChanged', handleChainChanged);\r\n      }\r\n    };\r\n\r\n    initWallet();\r\n\r\n    return () => {\r\n      if (window.ethereum) {\r\n        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\r\n        window.ethereum.removeListener('chainChanged', handleChainChanged);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const handleAccountsChanged = (accounts: string[]) => {\r\n    if (accounts.length === 0) {\r\n      disconnectWallet();\r\n    } else {\r\n      connectWallet();\r\n    }\r\n  };\r\n\r\n  const handleChainChanged = () => {\r\n    window.location.reload();\r\n  };\r\n\r\n  const connectWallet = async () => {\r\n    try {\r\n      setState(prev => ({ ...prev, isLoading: true, error: null }));\r\n\r\n      if (typeof window.ethereum === 'undefined') {\r\n        throw new Error('MetaMask is not installed');\r\n      }\r\n\r\n      const newProvider = new ethers.BrowserProvider(window.ethereum);\r\n      setProvider(newProvider);\r\n\r\n      const accounts = await window.ethereum.request({\r\n        method: 'eth_requestAccounts',\r\n      });\r\n\r\n      if (accounts.length === 0) {\r\n        throw new Error('No accounts found');\r\n      }\r\n\r\n      const newSigner = await newProvider.getSigner();\r\n      setSigner(newSigner);\r\n\r\n      const network = await newProvider.getNetwork();\r\n      const balance = await newProvider.getBalance(accounts[0]);\r\n\r\n      setState(prev => ({\r\n        ...prev,\r\n        wallet: {\r\n          isConnected: true,\r\n          account: accounts[0],\r\n          chainId: network.chainId.toString(),\r\n          balance: ethers.formatEther(balance),\r\n        },\r\n        isLoading: false,\r\n      }));\r\n\r\n      // Check if user is registered\r\n      await checkRegistration();\r\n    } catch (error: any) {\r\n      setState(prev => ({\r\n        ...prev,\r\n        isLoading: false,\r\n        error: error.message || 'Failed to connect wallet',\r\n      }));\r\n    }\r\n  };\r\n\r\n  const disconnectWallet = () => {\r\n    setState({\r\n      wallet: {\r\n        isConnected: false,\r\n        account: null,\r\n        chainId: null,\r\n        balance: null,\r\n      },\r\n      userProfile: null,\r\n      isRegistered: false,\r\n      isLoading: false,\r\n      error: null,\r\n    });\r\n    setProvider(null);\r\n    setSigner(null);\r\n  };\r\n\r\n  const checkRegistration = async (): Promise<boolean> => {\r\n    if (!provider || !state.wallet.account) return false;\r\n\r\n    try {\r\n      // This would be implemented with actual contract calls\r\n      // For now, we'll simulate it\r\n      const isRegistered = localStorage.getItem(`registered_${state.wallet.account}`) === 'true';\r\n      \r\n      setState(prev => ({\r\n        ...prev,\r\n        isRegistered,\r\n      }));\r\n\r\n      return isRegistered;\r\n    } catch (error) {\r\n      console.error('Error checking registration:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const registerUser = async (username: string, email: string) => {\r\n    if (!provider || !signer || !state.wallet.account) {\r\n      throw new Error('Wallet not connected');\r\n    }\r\n\r\n    try {\r\n      setState(prev => ({ ...prev, isLoading: true, error: null }));\r\n\r\n      // This would be implemented with actual contract calls\r\n      // For now, we'll simulate registration\r\n      await new Promise(resolve => setTimeout(resolve, 2000));\r\n\r\n      localStorage.setItem(`registered_${state.wallet.account}`, 'true');\r\n      \r\n      const userProfile: UserProfile = {\r\n        walletAddress: state.wallet.account,\r\n        username,\r\n        email,\r\n        registrationTime: new Date().toISOString(),\r\n        isActive: true,\r\n        reputationScore: 100,\r\n        accessRoles: [],\r\n      };\r\n\r\n      setState(prev => ({\r\n        ...prev,\r\n        userProfile,\r\n        isRegistered: true,\r\n        isLoading: false,\r\n      }));\r\n    } catch (error: any) {\r\n      setState(prev => ({\r\n        ...prev,\r\n        isLoading: false,\r\n        error: error.message || 'Registration failed',\r\n      }));\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const value: WalletContextType = {\r\n    state,\r\n    connectWallet,\r\n    disconnectWallet,\r\n    checkRegistration,\r\n    registerUser,\r\n  };\r\n\r\n  return (\r\n    <WalletContext.Provider value={value}>\r\n      {children}\r\n    </WalletContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useWallet = (): WalletContextType => {\r\n  const context = useContext(WalletContext);\r\n  if (context === undefined) {\r\n    throw new Error('useWallet must be used within a WalletProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\n// Extend Window interface for TypeScript\r\ndeclare global {\r\n  interface Window {\r\n    ethereum?: any;\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}