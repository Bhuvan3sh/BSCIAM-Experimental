{"ast":null,"code":"import CryptoJS from'crypto-js';import{saveAs}from'file-saver';// Generate a random encryption key for the user\nexport const generateEncryptionKey=()=>{return CryptoJS.lib.WordArray.random(256/8).toString(CryptoJS.enc.Hex);};// Encrypt a file using AES\nexport const encryptFile=async(file,key)=>{return new Promise((resolve,reject)=>{const reader=new FileReader();reader.onload=event=>{try{var _event$target;if(!((_event$target=event.target)!==null&&_event$target!==void 0&&_event$target.result)){throw new Error('Failed to read file');}const fileData=event.target.result;const wordArray=CryptoJS.lib.WordArray.create(fileData);const encrypted=CryptoJS.AES.encrypt(wordArray.toString(CryptoJS.enc.Base64),key);const metadata={name:file.name,originalName:file.name,type:file.type,mimeType:file.type,size:file.size,lastModified:file.lastModified};resolve({encryptedData:encrypted.toString(),metadata});}catch(error){reject(error);}};reader.onerror=error=>{reject(error);};reader.readAsArrayBuffer(file);});};// Decrypt a file\nexport const decryptFile=async(encryptedFile,key)=>{try{const decrypted=CryptoJS.AES.decrypt(encryptedFile.encryptedData,key);const decryptedBase64=decrypted.toString(CryptoJS.enc.Utf8);// Convert base64 to ArrayBuffer\nconst binaryString=window.atob(decryptedBase64);const len=binaryString.length;const bytes=new Uint8Array(len);for(let i=0;i<len;i++){bytes[i]=binaryString.charCodeAt(i);}return new Blob([bytes],{type:encryptedFile.metadata.type});}catch(error){console.error('Decryption failed:',error);throw new Error('Failed to decrypt file. Please check your encryption key.');}};// Save decrypted file to user's device\nexport const saveDecryptedFile=(decryptedBlob,originalName)=>{saveAs(decryptedBlob,originalName);};// Generate a deterministic key from user's wallet address and a passphrase\nexport const generateDeterministicKey=(walletAddress,passphrase)=>{const salt=CryptoJS.SHA256(walletAddress).toString();const key=CryptoJS.PBKDF2(passphrase,salt,{keySize:256/32,iterations:1000});return key.toString();};","map":{"version":3,"names":["CryptoJS","saveAs","generateEncryptionKey","lib","WordArray","random","toString","enc","Hex","encryptFile","file","key","Promise","resolve","reject","reader","FileReader","onload","event","_event$target","target","result","Error","fileData","wordArray","create","encrypted","AES","encrypt","Base64","metadata","name","originalName","type","mimeType","size","lastModified","encryptedData","error","onerror","readAsArrayBuffer","decryptFile","encryptedFile","decrypted","decrypt","decryptedBase64","Utf8","binaryString","window","atob","len","length","bytes","Uint8Array","i","charCodeAt","Blob","console","saveDecryptedFile","decryptedBlob","generateDeterministicKey","walletAddress","passphrase","salt","SHA256","PBKDF2","keySize","iterations"],"sources":["F:/Final Year Project/Project Implementation/frontend/src/utils/cryptoUtils.ts"],"sourcesContent":["import CryptoJS from 'crypto-js';\nimport { saveAs } from 'file-saver';\nimport { FileMetadata, EncryptedFile } from '../types';\n\n// Generate a random encryption key for the user\nexport const generateEncryptionKey = (): string => {\n  return CryptoJS.lib.WordArray.random(256/8).toString(CryptoJS.enc.Hex);\n};\n\n// Encrypt a file using AES\nexport const encryptFile = async (\n  file: File, \n  key: string\n): Promise<EncryptedFile> => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    \n    reader.onload = (event) => {\n      try {\n        if (!event.target?.result) {\n          throw new Error('Failed to read file');\n        }\n        \n        const fileData = event.target.result as ArrayBuffer;\n        const wordArray = CryptoJS.lib.WordArray.create(fileData as any);\n        const encrypted = CryptoJS.AES.encrypt(\n          wordArray.toString(CryptoJS.enc.Base64),\n          key\n        );\n\n        const metadata: FileMetadata = {\n          name: file.name,\n          originalName: file.name,\n          type: file.type,\n          mimeType: file.type,\n          size: file.size,\n          lastModified: file.lastModified\n        };\n\n        resolve({\n          encryptedData: encrypted.toString(),\n          metadata\n        });\n      } catch (error) {\n        reject(error);\n      }\n    };\n\n    reader.onerror = (error) => {\n      reject(error);\n    };\n\n    reader.readAsArrayBuffer(file);\n  });\n};\n\n// Decrypt a file\nexport const decryptFile = async (\n  encryptedFile: EncryptedFile, \n  key: string\n): Promise<Blob> => {\n  try {\n    const decrypted = CryptoJS.AES.decrypt(encryptedFile.encryptedData, key);\n    const decryptedBase64 = decrypted.toString(CryptoJS.enc.Utf8);\n    \n    // Convert base64 to ArrayBuffer\n    const binaryString = window.atob(decryptedBase64);\n    const len = binaryString.length;\n    const bytes = new Uint8Array(len);\n    \n    for (let i = 0; i < len; i++) {\n      bytes[i] = binaryString.charCodeAt(i);\n    }\n    \n    return new Blob([bytes], { type: encryptedFile.metadata.type });\n  } catch (error) {\n    console.error('Decryption failed:', error);\n    throw new Error('Failed to decrypt file. Please check your encryption key.');\n  }\n};\n\n// Save decrypted file to user's device\nexport const saveDecryptedFile = (\n  decryptedBlob: Blob, \n  originalName: string\n): void => {\n  saveAs(decryptedBlob, originalName);\n};\n\n// Generate a deterministic key from user's wallet address and a passphrase\nexport const generateDeterministicKey = (\n  walletAddress: string, \n  passphrase: string\n): string => {\n  const salt = CryptoJS.SHA256(walletAddress).toString();\n  const key = CryptoJS.PBKDF2(passphrase, salt, {\n    keySize: 256/32,\n    iterations: 1000\n  });\n  return key.toString();\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}