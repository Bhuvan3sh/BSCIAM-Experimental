{"ast":null,"code":"import CryptoJS from 'crypto-js';\nimport { saveAs } from 'file-saver';\n// Generate a random encryption key for the user\nexport const generateEncryptionKey = () => {\n  return CryptoJS.lib.WordArray.random(256 / 8).toString(CryptoJS.enc.Hex);\n};\n\n// Encrypt a file using AES\nexport const encryptFile = async (file, key) => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = event => {\n      try {\n        var _event$target;\n        if (!((_event$target = event.target) !== null && _event$target !== void 0 && _event$target.result)) {\n          throw new Error('Failed to read file');\n        }\n        const fileData = event.target.result;\n        const wordArray = CryptoJS.lib.WordArray.create(fileData);\n        const encrypted = CryptoJS.AES.encrypt(wordArray.toString(CryptoJS.enc.Base64), key);\n        const metadata = {\n          name: file.name,\n          type: file.type,\n          size: file.size,\n          lastModified: file.lastModified\n        };\n        resolve({\n          encryptedData: encrypted.toString(),\n          metadata\n        });\n      } catch (error) {\n        reject(error);\n      }\n    };\n    reader.onerror = error => {\n      reject(error);\n    };\n    reader.readAsArrayBuffer(file);\n  });\n};\n\n// Decrypt a file\nexport const decryptFile = async (encryptedFile, key) => {\n  try {\n    const decrypted = CryptoJS.AES.decrypt(encryptedFile.encryptedData, key);\n    const decryptedBase64 = decrypted.toString(CryptoJS.enc.Utf8);\n\n    // Convert base64 to ArrayBuffer\n    const binaryString = window.atob(decryptedBase64);\n    const len = binaryString.length;\n    const bytes = new Uint8Array(len);\n    for (let i = 0; i < len; i++) {\n      bytes[i] = binaryString.charCodeAt(i);\n    }\n    return new Blob([bytes], {\n      type: encryptedFile.metadata.type\n    });\n  } catch (error) {\n    console.error('Decryption failed:', error);\n    throw new Error('Failed to decrypt file. Please check your encryption key.');\n  }\n};\n\n// Save decrypted file to user's device\nexport const saveDecryptedFile = (decryptedBlob, originalName) => {\n  saveAs(decryptedBlob, originalName);\n};\n\n// Generate a deterministic key from user's wallet address and a passphrase\nexport const generateDeterministicKey = (walletAddress, passphrase) => {\n  const salt = CryptoJS.SHA256(walletAddress).toString();\n  const key = CryptoJS.PBKDF2(passphrase, salt, {\n    keySize: 256 / 32,\n    iterations: 1000\n  });\n  return key.toString();\n};","map":{"version":3,"names":["CryptoJS","saveAs","generateEncryptionKey","lib","WordArray","random","toString","enc","Hex","encryptFile","file","key","Promise","resolve","reject","reader","FileReader","onload","event","_event$target","target","result","Error","fileData","wordArray","create","encrypted","AES","encrypt","Base64","metadata","name","type","size","lastModified","encryptedData","error","onerror","readAsArrayBuffer","decryptFile","encryptedFile","decrypted","decrypt","decryptedBase64","Utf8","binaryString","window","atob","len","length","bytes","Uint8Array","i","charCodeAt","Blob","console","saveDecryptedFile","decryptedBlob","originalName","generateDeterministicKey","walletAddress","passphrase","salt","SHA256","PBKDF2","keySize","iterations"],"sources":["F:/Final Year Project/Project Implementation/frontend/src/utils/cryptoUtils.ts"],"sourcesContent":["import CryptoJS from 'crypto-js';\nimport { saveAs } from 'file-saver';\n\nexport interface FileMetadata {\n  name: string;\n  type: string;\n  size: number;\n  lastModified: number;\n}\n\nexport interface EncryptedFile {\n  encryptedData: string;\n  metadata: FileMetadata;\n}\n\n// Generate a random encryption key for the user\nexport const generateEncryptionKey = (): string => {\n  return CryptoJS.lib.WordArray.random(256/8).toString(CryptoJS.enc.Hex);\n};\n\n// Encrypt a file using AES\nexport const encryptFile = async (\n  file: File, \n  key: string\n): Promise<EncryptedFile> => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    \n    reader.onload = (event) => {\n      try {\n        if (!event.target?.result) {\n          throw new Error('Failed to read file');\n        }\n        \n        const fileData = event.target.result as ArrayBuffer;\n        const wordArray = CryptoJS.lib.WordArray.create(fileData as any);\n        const encrypted = CryptoJS.AES.encrypt(\n          wordArray.toString(CryptoJS.enc.Base64),\n          key\n        );\n\n        const metadata: FileMetadata = {\n          name: file.name,\n          type: file.type,\n          size: file.size,\n          lastModified: file.lastModified\n        };\n\n        resolve({\n          encryptedData: encrypted.toString(),\n          metadata\n        });\n      } catch (error) {\n        reject(error);\n      }\n    };\n\n    reader.onerror = (error) => {\n      reject(error);\n    };\n\n    reader.readAsArrayBuffer(file);\n  });\n};\n\n// Decrypt a file\nexport const decryptFile = async (\n  encryptedFile: EncryptedFile, \n  key: string\n): Promise<Blob> => {\n  try {\n    const decrypted = CryptoJS.AES.decrypt(encryptedFile.encryptedData, key);\n    const decryptedBase64 = decrypted.toString(CryptoJS.enc.Utf8);\n    \n    // Convert base64 to ArrayBuffer\n    const binaryString = window.atob(decryptedBase64);\n    const len = binaryString.length;\n    const bytes = new Uint8Array(len);\n    \n    for (let i = 0; i < len; i++) {\n      bytes[i] = binaryString.charCodeAt(i);\n    }\n    \n    return new Blob([bytes], { type: encryptedFile.metadata.type });\n  } catch (error) {\n    console.error('Decryption failed:', error);\n    throw new Error('Failed to decrypt file. Please check your encryption key.');\n  }\n};\n\n// Save decrypted file to user's device\nexport const saveDecryptedFile = (\n  decryptedBlob: Blob, \n  originalName: string\n): void => {\n  saveAs(decryptedBlob, originalName);\n};\n\n// Generate a deterministic key from user's wallet address and a passphrase\nexport const generateDeterministicKey = (\n  walletAddress: string, \n  passphrase: string\n): string => {\n  const salt = CryptoJS.SHA256(walletAddress).toString();\n  const key = CryptoJS.PBKDF2(passphrase, salt, {\n    keySize: 256/32,\n    iterations: 1000\n  });\n  return key.toString();\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}