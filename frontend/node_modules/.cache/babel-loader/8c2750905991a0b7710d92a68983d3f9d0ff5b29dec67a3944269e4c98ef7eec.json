{"ast":null,"code":"import CryptoJS from 'crypto-js';\nimport { saveAs } from 'file-saver';\n// Generate a random encryption key for the user\nexport const generateEncryptionKey = () => {\n  return CryptoJS.lib.WordArray.random(256 / 8).toString(CryptoJS.enc.Hex);\n};\n\n// Encrypt a file using AES\nexport const encryptFile = async (file, key) => {\n  console.log('[cryptoUtils] Starting file encryption...', {\n    fileName: file.name,\n    fileSize: file.size,\n    fileType: file.type,\n    keyLength: key === null || key === void 0 ? void 0 : key.length\n  });\n  return new Promise((resolve, reject) => {\n    if (!file) {\n      const error = new Error('No file provided');\n      console.error('[cryptoUtils]', error.message);\n      return reject(error);\n    }\n    if (!key) {\n      const error = new Error('No encryption key provided');\n      console.error('[cryptoUtils]', error.message);\n      return reject(error);\n    }\n    const reader = new FileReader();\n    reader.onload = event => {\n      try {\n        var _event$target;\n        console.log('[cryptoUtils] File read successfully');\n        if (!((_event$target = event.target) !== null && _event$target !== void 0 && _event$target.result)) {\n          const error = new Error('Failed to read file: No result from FileReader');\n          console.error('[cryptoUtils]', error.message);\n          return reject(error);\n        }\n        console.log('[cryptoUtils] Converting file to WordArray...');\n        const fileData = event.target.result;\n        const wordArray = CryptoJS.lib.WordArray.create(fileData);\n        console.log('[cryptoUtils] Encrypting file data...');\n        const encrypted = CryptoJS.AES.encrypt(wordArray.toString(CryptoJS.enc.Base64), key);\n        console.log('[cryptoUtils] File encrypted, creating metadata...');\n        const metadata = {\n          name: file.name,\n          originalName: file.name,\n          type: file.type,\n          mimeType: file.type,\n          size: file.size,\n          lastModified: file.lastModified\n        };\n        const result = {\n          encryptedData: encrypted.toString(),\n          metadata\n        };\n        console.log('[cryptoUtils] Encryption completed successfully');\n        resolve(result);\n      } catch (error) {\n        console.error('[cryptoUtils] Error during encryption:', error);\n        reject(error);\n      }\n    };\n    reader.onerror = error => {\n      console.error('[cryptoUtils] FileReader error:', error);\n      reject(new Error(`Failed to read file: ${error}`));\n    };\n    reader.onabort = () => {\n      const error = new Error('File reading was aborted');\n      console.error('[cryptoUtils]', error.message);\n      reject(error);\n    };\n    console.log('[cryptoUtils] Starting file read...');\n    reader.readAsArrayBuffer(file);\n  });\n};\n\n// Decrypt a file\nexport const decryptFile = async (encryptedFile, key) => {\n  try {\n    const decrypted = CryptoJS.AES.decrypt(encryptedFile.encryptedData, key);\n    const decryptedBase64 = decrypted.toString(CryptoJS.enc.Utf8);\n\n    // Convert base64 to ArrayBuffer\n    const binaryString = window.atob(decryptedBase64);\n    const len = binaryString.length;\n    const bytes = new Uint8Array(len);\n    for (let i = 0; i < len; i++) {\n      bytes[i] = binaryString.charCodeAt(i);\n    }\n    return new Blob([bytes], {\n      type: encryptedFile.metadata.type\n    });\n  } catch (error) {\n    console.error('Decryption failed:', error);\n    throw new Error('Failed to decrypt file. Please check your encryption key.');\n  }\n};\n\n// Save decrypted file to user's device\nexport const saveDecryptedFile = (decryptedBlob, originalName) => {\n  saveAs(decryptedBlob, originalName);\n};\n\n// Generate a deterministic key from user's wallet address and a passphrase\nexport const generateDeterministicKey = (walletAddress, passphrase) => {\n  const salt = CryptoJS.SHA256(walletAddress).toString();\n  const key = CryptoJS.PBKDF2(passphrase, salt, {\n    keySize: 256 / 32,\n    iterations: 1000\n  });\n  return key.toString();\n};","map":{"version":3,"names":["CryptoJS","saveAs","generateEncryptionKey","lib","WordArray","random","toString","enc","Hex","encryptFile","file","key","console","log","fileName","name","fileSize","size","fileType","type","keyLength","length","Promise","resolve","reject","error","Error","message","reader","FileReader","onload","event","_event$target","target","result","fileData","wordArray","create","encrypted","AES","encrypt","Base64","metadata","originalName","mimeType","lastModified","encryptedData","onerror","onabort","readAsArrayBuffer","decryptFile","encryptedFile","decrypted","decrypt","decryptedBase64","Utf8","binaryString","window","atob","len","bytes","Uint8Array","i","charCodeAt","Blob","saveDecryptedFile","decryptedBlob","generateDeterministicKey","walletAddress","passphrase","salt","SHA256","PBKDF2","keySize","iterations"],"sources":["F:/Final Year Project/Project Implementation/frontend/src/utils/cryptoUtils.ts"],"sourcesContent":["import CryptoJS from 'crypto-js';\nimport { saveAs } from 'file-saver';\nimport { FileMetadata, EncryptedFile } from '../types';\n\n// Generate a random encryption key for the user\nexport const generateEncryptionKey = (): string => {\n  return CryptoJS.lib.WordArray.random(256/8).toString(CryptoJS.enc.Hex);\n};\n\n// Encrypt a file using AES\nexport const encryptFile = async (\n  file: File, \n  key: string\n): Promise<EncryptedFile> => {\n  console.log('[cryptoUtils] Starting file encryption...', { \n    fileName: file.name, \n    fileSize: file.size,\n    fileType: file.type,\n    keyLength: key?.length \n  });\n\n  return new Promise((resolve, reject) => {\n    if (!file) {\n      const error = new Error('No file provided');\n      console.error('[cryptoUtils]', error.message);\n      return reject(error);\n    }\n\n    if (!key) {\n      const error = new Error('No encryption key provided');\n      console.error('[cryptoUtils]', error.message);\n      return reject(error);\n    }\n\n    const reader = new FileReader();\n    \n    reader.onload = (event) => {\n      try {\n        console.log('[cryptoUtils] File read successfully');\n        \n        if (!event.target?.result) {\n          const error = new Error('Failed to read file: No result from FileReader');\n          console.error('[cryptoUtils]', error.message);\n          return reject(error);\n        }\n        \n        console.log('[cryptoUtils] Converting file to WordArray...');\n        const fileData = event.target.result as ArrayBuffer;\n        const wordArray = CryptoJS.lib.WordArray.create(fileData as any);\n        \n        console.log('[cryptoUtils] Encrypting file data...');\n        const encrypted = CryptoJS.AES.encrypt(\n          wordArray.toString(CryptoJS.enc.Base64),\n          key\n        );\n\n        console.log('[cryptoUtils] File encrypted, creating metadata...');\n        const metadata: FileMetadata = {\n          name: file.name,\n          originalName: file.name,\n          type: file.type,\n          mimeType: file.type,\n          size: file.size,\n          lastModified: file.lastModified\n        };\n\n        const result = {\n          encryptedData: encrypted.toString(),\n          metadata\n        };\n\n        console.log('[cryptoUtils] Encryption completed successfully');\n        resolve(result);\n      } catch (error) {\n        console.error('[cryptoUtils] Error during encryption:', error);\n        reject(error);\n      }\n    };\n\n    reader.onerror = (error) => {\n      console.error('[cryptoUtils] FileReader error:', error);\n      reject(new Error(`Failed to read file: ${error}`));\n    };\n\n    reader.onabort = () => {\n      const error = new Error('File reading was aborted');\n      console.error('[cryptoUtils]', error.message);\n      reject(error);\n    };\n\n    console.log('[cryptoUtils] Starting file read...');\n    reader.readAsArrayBuffer(file);\n  });\n};\n\n// Decrypt a file\nexport const decryptFile = async (\n  encryptedFile: EncryptedFile, \n  key: string\n): Promise<Blob> => {\n  try {\n    const decrypted = CryptoJS.AES.decrypt(encryptedFile.encryptedData, key);\n    const decryptedBase64 = decrypted.toString(CryptoJS.enc.Utf8);\n    \n    // Convert base64 to ArrayBuffer\n    const binaryString = window.atob(decryptedBase64);\n    const len = binaryString.length;\n    const bytes = new Uint8Array(len);\n    \n    for (let i = 0; i < len; i++) {\n      bytes[i] = binaryString.charCodeAt(i);\n    }\n    \n    return new Blob([bytes], { type: encryptedFile.metadata.type });\n  } catch (error) {\n    console.error('Decryption failed:', error);\n    throw new Error('Failed to decrypt file. Please check your encryption key.');\n  }\n};\n\n// Save decrypted file to user's device\nexport const saveDecryptedFile = (\n  decryptedBlob: Blob, \n  originalName: string\n): void => {\n  saveAs(decryptedBlob, originalName);\n};\n\n// Generate a deterministic key from user's wallet address and a passphrase\nexport const generateDeterministicKey = (\n  walletAddress: string, \n  passphrase: string\n): string => {\n  const salt = CryptoJS.SHA256(walletAddress).toString();\n  const key = CryptoJS.PBKDF2(passphrase, salt, {\n    keySize: 256/32,\n    iterations: 1000\n  });\n  return key.toString();\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}