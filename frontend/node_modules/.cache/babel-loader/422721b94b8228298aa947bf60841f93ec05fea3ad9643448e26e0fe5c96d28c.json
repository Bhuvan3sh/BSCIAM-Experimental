{"ast":null,"code":"import _objectSpread from\"F:/Final Year Project/Project Implementation/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useContext,useState,useCallback}from'react';import{ethers}from'ethers';import{jsx as _jsx}from\"react/jsx-runtime\";const WalletContext=/*#__PURE__*/createContext(undefined);export const WalletProvider=_ref=>{let{children}=_ref;const[wallet,setWallet]=useState({isConnected:false,account:null,chainId:null,balance:null});const[userProfile,setUserProfile]=useState(null);const[isRegistered,setIsRegistered]=useState(false);const[isLoading,setIsLoading]=useState(false);const[error,setError]=useState(null);const[encryptionKey,setEncryptionKey]=useState(null);const[provider,setProvider]=useState(null);const[signer,setSigner]=useState(null);// Initialize encryption key for the current account\nconst initializeEncryptionKey=useCallback(account=>{const key=localStorage.getItem(\"encryption_key_\".concat(account));if(!key)return null;setEncryptionKey(key);return key;},[]);// Get stored files for the current user\nconst getStoredFiles=useCallback(()=>{if(!wallet.account)return[];const files=localStorage.getItem(\"files_\".concat(wallet.account));return files?JSON.parse(files):[];},[wallet.account]);// Activity helpers\nconst getActivities=useCallback(()=>{if(!wallet.account)return[];const raw=localStorage.getItem(\"activities_\".concat(wallet.account));return raw?JSON.parse(raw):[];},[wallet.account]);const saveActivities=useCallback(activities=>{if(!wallet.account)return;localStorage.setItem(\"activities_\".concat(wallet.account),JSON.stringify(activities));},[wallet.account]);const bumpReputation=useCallback(()=>{if(!wallet.account)return;const userRaw=localStorage.getItem(\"user_\".concat(wallet.account));if(!userRaw)return;const updated=_objectSpread(_objectSpread({},JSON.parse(userRaw)),{},{reputationScore:(JSON.parse(userRaw).reputationScore||0)+10});localStorage.setItem(\"user_\".concat(wallet.account),JSON.stringify(updated));setUserProfile(updated);},[wallet.account]);const recordActivity=useCallback((type,details)=>{if(!wallet.account)return;const activities=getActivities();const entry={id:crypto.randomUUID(),type,details,timestamp:new Date().toISOString()};const updated=[entry,...activities].slice(0,100);saveActivities(updated);bumpReputation();},[wallet.account,getActivities,saveActivities,bumpReputation]);// Get the user's encryption key\nconst getEncryptionKey=useCallback(()=>{if(!wallet.account)return null;return localStorage.getItem(\"encryption_key_\".concat(wallet.account));},[wallet.account]);// Store a new file\nconst storeFile=useCallback(file=>{if(!wallet.account){throw new Error('No wallet connected');}const files=getStoredFiles();// Check if file with same name already exists\nconst existingFileIndex=files.findIndex(f=>f.name===file.name&&f.uploadedAt===file.uploadedAt);let updatedFiles;if(existingFileIndex>=0){// Update existing file\nupdatedFiles=[...files];updatedFiles[existingFileIndex]=file;}else{// Add new file\nupdatedFiles=[...files,file];}localStorage.setItem(\"files_\".concat(wallet.account),JSON.stringify(updatedFiles));// Record upload activity\ntry{recordActivity('upload',file.name);}catch(_unused){}return updatedFiles;},[wallet.account,getStoredFiles,recordActivity]);// Delete a file\nconst deleteStoredFile=useCallback(fileId=>{if(!wallet.account){throw new Error('No wallet connected');}const files=getStoredFiles();const fileToDelete=files.find(f=>f.id===fileId);if(!fileToDelete){throw new Error('File not found');}const updatedFiles=files.filter(file=>file.id!==fileId);localStorage.setItem(\"files_\".concat(wallet.account),JSON.stringify(updatedFiles));try{recordActivity('delete',fileToDelete.name);}catch(_unused2){}return updatedFiles;},[wallet.account,getStoredFiles,recordActivity]);// Get the current encryption key\nconst getEncryptionKeyFromState=useCallback(()=>{return encryptionKey;},[encryptionKey]);// Upload a file with encryption\nconst uploadFile=useCallback(async(file,encryptedData,key)=>{if(!wallet.account){throw new Error('No wallet connected');}if(!key){throw new Error('Encryption key is required');}if(!encryptedData){throw new Error('No encrypted data provided');}try{setIsLoading(true);const storedFiles=getStoredFiles();// Check if file with same name already exists\nconst fileExists=storedFiles.some(f=>{var _f$metadata;return f.name===file.name&&((_f$metadata=f.metadata)===null||_f$metadata===void 0?void 0:_f$metadata.lastModified)===file.lastModified;});if(fileExists){throw new Error('A file with this name already exists');}const newFile={id:crypto.randomUUID(),name:file.name,type:file.type,size:file.size,uploadedAt:new Date().toISOString(),encryptedData,metadata:{name:file.name,originalName:file.name,type:file.type,mimeType:file.type,size:file.size,lastModified:file.lastModified}};const updatedFiles=[...storedFiles,newFile];localStorage.setItem(\"files_\".concat(wallet.account),JSON.stringify(updatedFiles));return newFile;}catch(error){console.error('Error uploading file:',error);throw error;}finally{setIsLoading(false);}},[wallet.account,getStoredFiles]);// Check if user is already registered\nconst checkRegistration=useCallback(async account=>{try{if(!account)return false;const userData=localStorage.getItem(\"user_\".concat(account));const encryptionKey=localStorage.getItem(\"encryption_key_\".concat(account));if(userData&&encryptionKey){const userProfile=JSON.parse(userData);setUserProfile(userProfile);setEncryptionKey(encryptionKey);setIsRegistered(true);return true;}// Clear any partial data if registration is not complete\nlocalStorage.removeItem(\"user_\".concat(account));localStorage.removeItem(\"encryption_key_\".concat(account));return false;}catch(error){console.error('Error checking registration:',error);setError('Failed to check user registration.');return false;}},[initializeEncryptionKey]);// Validate encryption key against the stored key\nconst validateEncryptionKey=useCallback(key=>{if(!wallet.account)return false;const storedKey=localStorage.getItem(\"encryption_key_\".concat(wallet.account));return key===storedKey;},[wallet.account]);// Disconnect wallet\nconst disconnectWallet=useCallback(()=>{// Note: We don't clear localStorage here to preserve user data for future logins\nsetWallet({isConnected:false,account:null,chainId:null,balance:null});setUserProfile(null);setIsRegistered(false);setIsLoading(false);setError(null);setProvider(null);setSigner(null);},[]);// Connect wallet\nconst connectWallet=useCallback(async()=>{if(typeof window.ethereum==='undefined'){setError('Please install MetaMask!');return;}try{setIsLoading(true);const provider=new ethers.BrowserProvider(window.ethereum);const signer=await provider.getSigner();const address=await signer.getAddress();const network=await provider.getNetwork();setProvider(provider);setSigner(signer);setWallet({isConnected:true,account:address,chainId:network.chainId.toString(),balance:null});setError(null);// Check if user is registered\nconst registered=await checkRegistration(address);if(registered){try{recordActivity('login','Wallet connected');}catch(_unused3){}}}catch(err){console.error('Error connecting wallet:',err);setError('Failed to connect wallet. Please try again.');}finally{setIsLoading(false);}},[checkRegistration]);// Register a new user\nconst registerUser=useCallback(async function(username){let email=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';if(!wallet.account){return{success:false,message:'No wallet connected'};}try{setIsLoading(true);// Generate a secure encryption key for the user\nconst key=Array.from(window.crypto.getRandomValues(new Uint8Array(32))).map(b=>b.toString(16).padStart(2,'0')).join('');// Create user profile according to UserProfile interface\nconst newUserProfile={walletAddress:wallet.account,username,email,registrationTime:new Date().toISOString(),isActive:true,reputationScore:0,accessRoles:['user']};// Store user data and encryption key in localStorage\nlocalStorage.setItem(\"user_\".concat(wallet.account),JSON.stringify(newUserProfile));localStorage.setItem(\"encryption_key_\".concat(wallet.account),key);// Update state\nsetUserProfile(newUserProfile);setIsRegistered(true);setEncryptionKey(key);// Seed activities with registration considered as login\ntry{const initialActivities=[{id:crypto.randomUUID(),type:'login',details:'Registered and logged in',timestamp:new Date().toISOString()}];localStorage.setItem(\"activities_\".concat(wallet.account),JSON.stringify(initialActivities));}catch(_unused4){}// Copy the encryption key to clipboard\ntry{await navigator.clipboard.writeText(key);// Also alert the user with the generated key\ntry{window.alert(\"Registration successful!\\n\\nYour encryption key (copy kept in clipboard):\\n\".concat(key,\"\\n\\nStore this key safely; it is required for all file operations.\"));}catch(e){// no-op if alert blocked\n}return{success:true,message:'Registration successful! Your encryption key has been copied to clipboard. Please keep it safe!',encryptionKey:key};}catch(clipboardError){console.error('Failed to copy encryption key:',clipboardError);try{window.alert(\"Registration successful!\\n\\nPlease copy and save your encryption key:\\n\".concat(key));}catch(e){// no-op\n}return{success:true,message:\"Registration successful! Please copy and save your encryption key: \".concat(key),encryptionKey:key};}}catch(error){console.error('Registration failed:',error);return{success:false,message:error instanceof Error?error.message:'Registration failed. Please try again.'};}finally{setIsLoading(false);}},[wallet.account]);const updateUsername=useCallback(newUsername=>{if(!wallet.account||!userProfile)return;const updated=_objectSpread(_objectSpread({},userProfile),{},{username:newUsername});localStorage.setItem(\"user_\".concat(wallet.account),JSON.stringify(updated));setUserProfile(updated);},[wallet.account,userProfile]);const getRecentActivities=useCallback(function(){let limit=arguments.length>0&&arguments[0]!==undefined?arguments[0]:3;return getActivities().slice(0,limit);},[getActivities]);const getAllActivities=useCallback(()=>{return getActivities();},[getActivities]);const getAllUsers=useCallback(()=>{const users=[];for(let i=0;i<localStorage.length;i++){const key=localStorage.key(i);if(!key)continue;if(key.startsWith('user_')){try{users.push(JSON.parse(localStorage.getItem(key)||'null'));}catch(_unused5){}}}return users;},[]);const value={wallet,isRegistered,userProfile,isLoading,error,encryptionKey,connectWallet,disconnectWallet,registerUser,getEncryptionKey:getEncryptionKeyFromState,validateEncryptionKey,getStoredFiles,storeFile,uploadFile,downloadFile:async(fileId,key)=>{// Implement download file logic here\nconsole.log('Downloading file:',fileId,'with key:',key);},deleteStoredFile,getRecentActivities,getAllActivities,recordActivity,updateUsername,getAllUsers};return/*#__PURE__*/_jsx(WalletContext.Provider,{value:value,children:children});};export const useWallet=()=>{const context=useContext(WalletContext);if(context===undefined){throw new Error('useWallet must be used within a WalletProvider');}return context;};// Extend Window interface for TypeScript","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","ethers","jsx","_jsx","WalletContext","undefined","WalletProvider","_ref","children","wallet","setWallet","isConnected","account","chainId","balance","userProfile","setUserProfile","isRegistered","setIsRegistered","isLoading","setIsLoading","error","setError","encryptionKey","setEncryptionKey","provider","setProvider","signer","setSigner","initializeEncryptionKey","key","localStorage","getItem","concat","getStoredFiles","files","JSON","parse","getActivities","raw","saveActivities","activities","setItem","stringify","bumpReputation","userRaw","updated","_objectSpread","reputationScore","recordActivity","type","details","entry","id","crypto","randomUUID","timestamp","Date","toISOString","slice","getEncryptionKey","storeFile","file","Error","existingFileIndex","findIndex","f","name","uploadedAt","updatedFiles","_unused","deleteStoredFile","fileId","fileToDelete","find","filter","_unused2","getEncryptionKeyFromState","uploadFile","encryptedData","storedFiles","fileExists","some","_f$metadata","metadata","lastModified","newFile","size","originalName","mimeType","console","checkRegistration","userData","removeItem","validateEncryptionKey","storedKey","disconnectWallet","connectWallet","window","ethereum","BrowserProvider","getSigner","address","getAddress","network","getNetwork","toString","registered","_unused3","err","registerUser","username","email","arguments","length","success","message","Array","from","getRandomValues","Uint8Array","map","b","padStart","join","newUserProfile","walletAddress","registrationTime","isActive","accessRoles","initialActivities","_unused4","navigator","clipboard","writeText","alert","e","clipboardError","updateUsername","newUsername","getRecentActivities","limit","getAllActivities","getAllUsers","users","i","startsWith","push","_unused5","value","downloadFile","log","Provider","useWallet","context"],"sources":["F:/Final Year Project/Project Implementation/frontend/src/context/WalletContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useCallback, ReactNode } from 'react';\nimport { ethers } from 'ethers';\nimport { StoredFile } from '../types';\nimport { UserProfile } from '../types';\n\ndeclare global {\n  interface Window {\n    ethereum?: any;\n  }\n}\n\ninterface WalletState {\n  isConnected: boolean;\n  account: string | null;\n  chainId: string | null;\n  balance: string | null;\n}\n\ninterface WalletContextType {\n  // Wallet state\n  wallet: WalletState;\n  isRegistered: boolean;\n  userProfile: UserProfile | null;\n  isLoading: boolean;\n  error: string | null;\n  encryptionKey: string | null;\n  \n  // Wallet methods\n  connectWallet: () => Promise<void>;\n  disconnectWallet: () => void;\n  \n  // User methods\n  registerUser: (username: string, email?: string) => Promise<{ \n    success: boolean; \n    message: string; \n    encryptionKey?: string \n  }>;\n  \n  // Encryption methods\n  getEncryptionKey: () => string | null;\n  validateEncryptionKey: (key: string) => boolean;\n  \n  // File methods\n  getStoredFiles: () => StoredFile[];\n  storeFile: (file: StoredFile) => StoredFile[];\n  uploadFile: (file: File, encryptedData: any, key: string) => Promise<StoredFile>;\n  downloadFile: (fileId: string, key: string) => Promise<void>;\n  deleteStoredFile: (fileId: string) => void;\n\n  // Activity & profile\n  getRecentActivities: (limit?: number) => Array<{ id: string; type: string; details?: string; timestamp: string }>;\n  getAllActivities: () => Array<{ id: string; type: string; details?: string; timestamp: string }>;\n  recordActivity: (type: 'login' | 'upload' | 'download' | 'delete', details?: string) => void;\n  updateUsername: (newUsername: string) => void;\n  getAllUsers: () => UserProfile[];\n}\n\nconst WalletContext = createContext<WalletContextType | undefined>(undefined);\n\ninterface WalletProviderProps {\n  children: ReactNode;\n}\n\nexport const WalletProvider: React.FC<WalletProviderProps> = ({ children }) => {\n  const [wallet, setWallet] = useState<WalletState>({\n    isConnected: false,\n    account: null,\n    chainId: null,\n    balance: null,\n  });\n  \n  const [userProfile, setUserProfile] = useState<UserProfile | null>(null);\n  const [isRegistered, setIsRegistered] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [encryptionKey, setEncryptionKey] = useState<string | null>(null);\n\n  const [provider, setProvider] = useState<ethers.BrowserProvider | null>(null);\n  const [signer, setSigner] = useState<ethers.JsonRpcSigner | null>(null);\n\n  // Initialize encryption key for the current account\n  const initializeEncryptionKey = useCallback((account: string): string | null => {\n    const key = localStorage.getItem(`encryption_key_${account}`);\n    if (!key) return null;\n    setEncryptionKey(key);\n    return key;\n  }, []);\n\n  // Get stored files for the current user\n  const getStoredFiles = useCallback((): StoredFile[] => {\n    if (!wallet.account) return [];\n    const files = localStorage.getItem(`files_${wallet.account}`);\n    return files ? JSON.parse(files) : [];\n  }, [wallet.account]);\n\n  // Activity helpers\n  const getActivities = useCallback((): Array<{ id: string; type: string; details?: string; timestamp: string }> => {\n    if (!wallet.account) return [];\n    const raw = localStorage.getItem(`activities_${wallet.account}`);\n    return raw ? JSON.parse(raw) : [];\n  }, [wallet.account]);\n\n  const saveActivities = useCallback((activities: Array<{ id: string; type: string; details?: string; timestamp: string }>) => {\n    if (!wallet.account) return;\n    localStorage.setItem(`activities_${wallet.account}`, JSON.stringify(activities));\n  }, [wallet.account]);\n\n  const bumpReputation = useCallback(() => {\n    if (!wallet.account) return;\n    const userRaw = localStorage.getItem(`user_${wallet.account}`);\n    if (!userRaw) return;\n    const updated: UserProfile = { ...JSON.parse(userRaw), reputationScore: (JSON.parse(userRaw).reputationScore || 0) + 10 };\n    localStorage.setItem(`user_${wallet.account}`, JSON.stringify(updated));\n    setUserProfile(updated);\n  }, [wallet.account]);\n\n  const recordActivity = useCallback((type: 'login' | 'upload' | 'download' | 'delete', details?: string) => {\n    if (!wallet.account) return;\n    const activities = getActivities();\n    const entry = { id: crypto.randomUUID(), type, details, timestamp: new Date().toISOString() };\n    const updated = [entry, ...activities].slice(0, 100);\n    saveActivities(updated);\n    bumpReputation();\n  }, [wallet.account, getActivities, saveActivities, bumpReputation]);\n\n  // Get the user's encryption key\n  const getEncryptionKey = useCallback((): string | null => {\n    if (!wallet.account) return null;\n    return localStorage.getItem(`encryption_key_${wallet.account}`);\n  }, [wallet.account]);\n\n  // Store a new file\n  const storeFile = useCallback((file: StoredFile) => {\n    if (!wallet.account) {\n      throw new Error('No wallet connected');\n    }\n    \n    const files = getStoredFiles();\n    // Check if file with same name already exists\n    const existingFileIndex = files.findIndex(f => f.name === file.name && f.uploadedAt === file.uploadedAt);\n    \n    let updatedFiles;\n    if (existingFileIndex >= 0) {\n      // Update existing file\n      updatedFiles = [...files];\n      updatedFiles[existingFileIndex] = file;\n    } else {\n      // Add new file\n      updatedFiles = [...files, file];\n    }\n    \n    localStorage.setItem(\n      `files_${wallet.account}`, \n      JSON.stringify(updatedFiles)\n    );\n    // Record upload activity\n    try { recordActivity('upload', file.name); } catch {}\n    return updatedFiles;\n  }, [wallet.account, getStoredFiles, recordActivity]);\n\n  // Delete a file\n  const deleteStoredFile = useCallback((fileId: string) => {\n    if (!wallet.account) {\n      throw new Error('No wallet connected');\n    }\n    \n    const files = getStoredFiles();\n    const fileToDelete = files.find(f => f.id === fileId);\n    \n    if (!fileToDelete) {\n      throw new Error('File not found');\n    }\n    \n    const updatedFiles = files.filter(file => file.id !== fileId);\n    \n    localStorage.setItem(\n      `files_${wallet.account}`, \n      JSON.stringify(updatedFiles)\n    );\n    try { recordActivity('delete', fileToDelete.name); } catch {}\n    return updatedFiles;\n  }, [wallet.account, getStoredFiles, recordActivity]);\n\n  // Get the current encryption key\n  const getEncryptionKeyFromState = useCallback((): string | null => {\n    return encryptionKey;\n  }, [encryptionKey]);\n\n  // Upload a file with encryption\n  const uploadFile = useCallback(async (file: File, encryptedData: any, key: string): Promise<StoredFile> => {\n    if (!wallet.account) {\n      throw new Error('No wallet connected');\n    }\n    \n    if (!key) {\n      throw new Error('Encryption key is required');\n    }\n    \n    if (!encryptedData) {\n      throw new Error('No encrypted data provided');\n    }\n    \n    try {\n      setIsLoading(true);\n      const storedFiles = getStoredFiles();\n      \n      // Check if file with same name already exists\n      const fileExists = storedFiles.some(f => \n        f.name === file.name && \n        f.metadata?.lastModified === file.lastModified\n      );\n      \n      if (fileExists) {\n        throw new Error('A file with this name already exists');\n      }\n      \n      const newFile: StoredFile = {\n        id: crypto.randomUUID(),\n        name: file.name,\n        type: file.type,\n        size: file.size,\n        uploadedAt: new Date().toISOString(),\n        encryptedData,\n        metadata: {\n          name: file.name,\n          originalName: file.name,\n          type: file.type,\n          mimeType: file.type,\n          size: file.size,\n          lastModified: file.lastModified\n        }\n      };\n      \n      const updatedFiles = [...storedFiles, newFile];\n      localStorage.setItem(`files_${wallet.account}`, JSON.stringify(updatedFiles));\n      \n      return newFile;\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [wallet.account, getStoredFiles]);\n\n  // Check if user is already registered\n  const checkRegistration = useCallback(async (account: string): Promise<boolean> => {\n    try {\n      if (!account) return false;\n      \n      const userData = localStorage.getItem(`user_${account}`);\n      const encryptionKey = localStorage.getItem(`encryption_key_${account}`);\n      \n      if (userData && encryptionKey) {\n        const userProfile = JSON.parse(userData) as UserProfile;\n        setUserProfile(userProfile);\n        setEncryptionKey(encryptionKey);\n        setIsRegistered(true);\n        return true;\n      }\n      \n      // Clear any partial data if registration is not complete\n      localStorage.removeItem(`user_${account}`);\n      localStorage.removeItem(`encryption_key_${account}`);\n      return false;\n    } catch (error) {\n      console.error('Error checking registration:', error);\n      setError('Failed to check user registration.');\n      return false;\n    }\n  }, [initializeEncryptionKey]);\n\n  // Validate encryption key against the stored key\n  const validateEncryptionKey = useCallback((key: string): boolean => {\n    if (!wallet.account) return false;\n    const storedKey = localStorage.getItem(`encryption_key_${wallet.account}`);\n    return key === storedKey;\n  }, [wallet.account]);\n\n  // Disconnect wallet\n  const disconnectWallet = useCallback(() => {\n    // Note: We don't clear localStorage here to preserve user data for future logins\n    setWallet({\n      isConnected: false,\n      account: null,\n      chainId: null,\n      balance: null,\n    });\n    setUserProfile(null);\n    setIsRegistered(false);\n    setIsLoading(false);\n    setError(null);\n    setProvider(null);\n    setSigner(null);\n  }, []);\n\n  // Connect wallet\n  const connectWallet = useCallback(async () => {\n    if (typeof window.ethereum === 'undefined') {\n      setError('Please install MetaMask!');\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const signer = await provider.getSigner();\n      const address = await signer.getAddress();\n      const network = await provider.getNetwork();\n      \n      setProvider(provider);\n      setSigner(signer);\n      setWallet({\n        isConnected: true,\n        account: address,\n        chainId: network.chainId.toString(),\n        balance: null,\n      });\n      setError(null);\n\n      // Check if user is registered\n      const registered = await checkRegistration(address);\n      if (registered) {\n        try { recordActivity('login', 'Wallet connected'); } catch {}\n      }\n    } catch (err) {\n      console.error('Error connecting wallet:', err);\n      setError('Failed to connect wallet. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [checkRegistration]);\n\n  // Register a new user\n  const registerUser = useCallback(async (username: string, email: string = '') => {\n    if (!wallet.account) {\n      return { success: false, message: 'No wallet connected' };\n    }\n\n    try {\n      setIsLoading(true);\n      \n      // Generate a secure encryption key for the user\n      const key = Array.from(window.crypto.getRandomValues(new Uint8Array(32)))\n        .map(b => b.toString(16).padStart(2, '0'))\n        .join('');\n      \n      // Create user profile according to UserProfile interface\n      const newUserProfile: UserProfile = {\n        walletAddress: wallet.account,\n        username,\n        email,\n        registrationTime: new Date().toISOString(),\n        isActive: true,\n        reputationScore: 0,\n        accessRoles: ['user']\n      };\n\n      // Store user data and encryption key in localStorage\n      localStorage.setItem(`user_${wallet.account}`, JSON.stringify(newUserProfile));\n      localStorage.setItem(`encryption_key_${wallet.account}`, key);\n      \n      // Update state\n      setUserProfile(newUserProfile);\n      setIsRegistered(true);\n      setEncryptionKey(key);\n\n      // Seed activities with registration considered as login\n      try {\n        const initialActivities = [{ id: crypto.randomUUID(), type: 'login', details: 'Registered and logged in', timestamp: new Date().toISOString() }];\n        localStorage.setItem(`activities_${wallet.account}`, JSON.stringify(initialActivities));\n      } catch {}\n      \n      // Copy the encryption key to clipboard\n      try {\n        await navigator.clipboard.writeText(key);\n        // Also alert the user with the generated key\n        try {\n          window.alert(`Registration successful!\\n\\nYour encryption key (copy kept in clipboard):\\n${key}\\n\\nStore this key safely; it is required for all file operations.`);\n        } catch (e) {\n          // no-op if alert blocked\n        }\n        return { \n          success: true, \n          message: 'Registration successful! Your encryption key has been copied to clipboard. Please keep it safe!',\n          encryptionKey: key\n        };\n      } catch (clipboardError) {\n        console.error('Failed to copy encryption key:', clipboardError);\n        try {\n          window.alert(`Registration successful!\\n\\nPlease copy and save your encryption key:\\n${key}`);\n        } catch (e) {\n          // no-op\n        }\n        return { \n          success: true, \n          message: `Registration successful! Please copy and save your encryption key: ${key}`,\n          encryptionKey: key\n        };\n      }\n    } catch (error) {\n      console.error('Registration failed:', error);\n      return { \n        success: false, \n        message: error instanceof Error ? error.message : 'Registration failed. Please try again.'\n      };\n    } finally {\n      setIsLoading(false);\n    }\n  }, [wallet.account]);\n\n  const updateUsername = useCallback((newUsername: string) => {\n    if (!wallet.account || !userProfile) return;\n    const updated: UserProfile = { ...userProfile, username: newUsername };\n    localStorage.setItem(`user_${wallet.account}`, JSON.stringify(updated));\n    setUserProfile(updated);\n  }, [wallet.account, userProfile]);\n\n  const getRecentActivities = useCallback((limit: number = 3) => {\n    return getActivities().slice(0, limit);\n  }, [getActivities]);\n\n  const getAllActivities = useCallback(() => {\n    return getActivities();\n  }, [getActivities]);\n\n  const getAllUsers = useCallback((): UserProfile[] => {\n    const users: UserProfile[] = [];\n    for (let i = 0; i < localStorage.length; i++) {\n      const key = localStorage.key(i);\n      if (!key) continue;\n      if (key.startsWith('user_')) {\n        try {\n          users.push(JSON.parse(localStorage.getItem(key) || 'null'));\n        } catch {}\n      }\n    }\n    return users;\n  }, []);\n\n  const value: WalletContextType = {\n    wallet,\n    isRegistered,\n    userProfile,\n    isLoading,\n    error,\n    encryptionKey,\n    connectWallet,\n    disconnectWallet,\n    registerUser,\n    getEncryptionKey: getEncryptionKeyFromState,\n    validateEncryptionKey,\n    getStoredFiles,\n    storeFile,\n    uploadFile,\n    downloadFile: async (fileId: string, key: string) => {\n      // Implement download file logic here\n      console.log('Downloading file:', fileId, 'with key:', key);\n    },\n    deleteStoredFile,\n    getRecentActivities,\n    getAllActivities,\n    recordActivity,\n    updateUsername,\n    getAllUsers,\n  };\n\n  return (\n    <WalletContext.Provider value={value}>\n      {children}\n    </WalletContext.Provider>\n  );\n};\n\nexport const useWallet = (): WalletContextType => {\n  const context = useContext(WalletContext);\n  if (context === undefined) {\n    throw new Error('useWallet must be used within a WalletProvider');\n  }\n  return context;\n};\n\n// Extend Window interface for TypeScript\ndeclare global {\n  interface Window {\n    ethereum?: any;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}