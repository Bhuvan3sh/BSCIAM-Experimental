{"ast":null,"code":"var _jsxFileName = \"F:\\\\Final Year Project\\\\Project Implementation\\\\frontend\\\\src\\\\context\\\\WalletContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useCallback } from 'react';\nimport { ethers } from 'ethers';\nimport { BSCIAMAuthABI } from '../config/abi';\nimport contracts from '../config/contracts.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WalletContext = /*#__PURE__*/createContext(undefined);\nexport const WalletProvider = ({\n  children\n}) => {\n  _s();\n  const [wallet, setWallet] = useState({\n    isConnected: false,\n    account: null,\n    chainId: null,\n    balance: null\n  });\n  const [userProfile, setUserProfile] = useState(null);\n  const [isRegistered, setIsRegistered] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [encryptionKey, setEncryptionKey] = useState(null);\n  const [provider, setProvider] = useState(null);\n  const [signer, setSigner] = useState(null);\n\n  // Initialize encryption key for the current account\n  const initializeEncryptionKey = useCallback(account => {\n    const key = localStorage.getItem(`encryption_key_${account}`);\n    if (!key) return null;\n    setEncryptionKey(key);\n    return key;\n  }, []);\n\n  // Get stored files for the current user\n  const getStoredFiles = useCallback(() => {\n    if (!wallet.account) return [];\n    const files = localStorage.getItem(`files_${wallet.account}`);\n    return files ? JSON.parse(files) : [];\n  }, [wallet.account]);\n\n  // Activity helpers\n  const getActivities = useCallback(() => {\n    if (!wallet.account) return [];\n    const raw = localStorage.getItem(`activities_${wallet.account}`);\n    return raw ? JSON.parse(raw) : [];\n  }, [wallet.account]);\n  const saveActivities = useCallback(activities => {\n    if (!wallet.account) return;\n    localStorage.setItem(`activities_${wallet.account}`, JSON.stringify(activities));\n  }, [wallet.account]);\n  const bumpReputation = useCallback(() => {\n    if (!wallet.account) return;\n    const userRaw = localStorage.getItem(`user_${wallet.account}`);\n    if (!userRaw) return;\n    const updated = {\n      ...JSON.parse(userRaw),\n      reputationScore: (JSON.parse(userRaw).reputationScore || 0) + 10\n    };\n    localStorage.setItem(`user_${wallet.account}`, JSON.stringify(updated));\n    setUserProfile(updated);\n  }, [wallet.account]);\n  const recordActivity = useCallback((type, details) => {\n    if (!wallet.account) return;\n    const activities = getActivities();\n    const entry = {\n      id: crypto.randomUUID(),\n      type,\n      details,\n      timestamp: new Date().toISOString()\n    };\n    const updated = [entry, ...activities].slice(0, 100);\n    saveActivities(updated);\n    bumpReputation();\n  }, [wallet.account, getActivities, saveActivities, bumpReputation]);\n\n  // Get the user's encryption key\n  const getEncryptionKey = useCallback(() => {\n    if (!wallet.account) return null;\n    return localStorage.getItem(`encryption_key_${wallet.account}`);\n  }, [wallet.account]);\n\n  // Store a new file\n  const storeFile = useCallback(file => {\n    if (!wallet.account) {\n      throw new Error('No wallet connected');\n    }\n    const files = getStoredFiles();\n    // Check if file with same name already exists\n    const existingFileIndex = files.findIndex(f => f.name === file.name && f.uploadedAt === file.uploadedAt);\n    let updatedFiles;\n    if (existingFileIndex >= 0) {\n      // Update existing file\n      updatedFiles = [...files];\n      updatedFiles[existingFileIndex] = file;\n    } else {\n      // Add new file\n      updatedFiles = [...files, file];\n    }\n    localStorage.setItem(`files_${wallet.account}`, JSON.stringify(updatedFiles));\n    // Record upload activity\n    try {\n      recordActivity('upload', file.name);\n    } catch {}\n    return updatedFiles;\n  }, [wallet.account, getStoredFiles, recordActivity]);\n\n  // Delete a file\n  const deleteStoredFile = useCallback(fileId => {\n    if (!wallet.account) {\n      throw new Error('No wallet connected');\n    }\n    const files = getStoredFiles();\n    const fileToDelete = files.find(f => f.id === fileId);\n    if (!fileToDelete) {\n      throw new Error('File not found');\n    }\n    const updatedFiles = files.filter(file => file.id !== fileId);\n    localStorage.setItem(`files_${wallet.account}`, JSON.stringify(updatedFiles));\n    try {\n      recordActivity('delete', fileToDelete.name);\n    } catch {}\n    return updatedFiles;\n  }, [wallet.account, getStoredFiles, recordActivity]);\n\n  // Get the current encryption key\n  const getEncryptionKeyFromState = useCallback(() => {\n    return encryptionKey;\n  }, [encryptionKey]);\n\n  // Upload a file with encryption\n  const uploadFile = useCallback(async (file, encryptedData, key) => {\n    if (!wallet.account) {\n      throw new Error('No wallet connected');\n    }\n    if (!key) {\n      throw new Error('Encryption key is required');\n    }\n    if (!encryptedData) {\n      throw new Error('No encrypted data provided');\n    }\n    try {\n      setIsLoading(true);\n      const storedFiles = getStoredFiles();\n\n      // Check if file with same name already exists\n      const fileExists = storedFiles.some(f => {\n        var _f$metadata;\n        return f.name === file.name && ((_f$metadata = f.metadata) === null || _f$metadata === void 0 ? void 0 : _f$metadata.lastModified) === file.lastModified;\n      });\n      if (fileExists) {\n        throw new Error('A file with this name already exists');\n      }\n      const newFile = {\n        id: crypto.randomUUID(),\n        name: file.name,\n        type: file.type,\n        size: file.size,\n        uploadedAt: new Date().toISOString(),\n        encryptedData,\n        metadata: {\n          name: file.name,\n          originalName: file.name,\n          type: file.type,\n          mimeType: file.type,\n          size: file.size,\n          lastModified: file.lastModified\n        }\n      };\n      const updatedFiles = [...storedFiles, newFile];\n      localStorage.setItem(`files_${wallet.account}`, JSON.stringify(updatedFiles));\n      return newFile;\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [wallet.account, getStoredFiles]);\n\n  // Check if user is already registered\n  const checkRegistration = useCallback(async account => {\n    try {\n      if (!account) return false;\n      const userData = localStorage.getItem(`user_${account}`);\n      const encryptionKey = localStorage.getItem(`encryption_key_${account}`);\n      if (userData && encryptionKey) {\n        const userProfile = JSON.parse(userData);\n        setUserProfile(userProfile);\n        setEncryptionKey(encryptionKey);\n        setIsRegistered(true);\n        return true;\n      }\n\n      // Clear any partial data if registration is not complete\n      localStorage.removeItem(`user_${account}`);\n      localStorage.removeItem(`encryption_key_${account}`);\n      return false;\n    } catch (error) {\n      console.error('Error checking registration:', error);\n      setError('Failed to check user registration.');\n      return false;\n    }\n  }, [initializeEncryptionKey]);\n\n  // Validate encryption key against the stored key\n  const validateEncryptionKey = useCallback(key => {\n    if (!wallet.account) return false;\n    const storedKey = localStorage.getItem(`encryption_key_${wallet.account}`);\n    return key === storedKey;\n  }, [wallet.account]);\n\n  // Disconnect wallet\n  const disconnectWallet = useCallback(() => {\n    // Note: We don't clear localStorage here to preserve user data for future logins\n    setWallet({\n      isConnected: false,\n      account: null,\n      chainId: null,\n      balance: null\n    });\n    setUserProfile(null);\n    setIsRegistered(false);\n    setIsLoading(false);\n    setError(null);\n    setProvider(null);\n    setSigner(null);\n  }, []);\n\n  // Connect wallet\n  const connectWallet = useCallback(async () => {\n    if (typeof window.ethereum === 'undefined') {\n      setError('Please install MetaMask!');\n      return;\n    }\n    try {\n      setIsLoading(true);\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const signer = await provider.getSigner();\n      const address = await signer.getAddress();\n      const network = await provider.getNetwork();\n      setProvider(provider);\n      setSigner(signer);\n      setWallet({\n        isConnected: true,\n        account: address,\n        chainId: network.chainId.toString(),\n        balance: null\n      });\n      setError(null);\n\n      // Check if user is registered\n      const registered = await checkRegistration(address);\n      if (registered) {\n        try {\n          recordActivity('login', 'Wallet connected');\n        } catch {}\n      }\n    } catch (err) {\n      console.error('Error connecting wallet:', err);\n      setError('Failed to connect wallet. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [checkRegistration]);\n\n  // Register a new user\n  const registerUser = useCallback(async (username, email = '') => {\n    if (!wallet.account) {\n      return {\n        success: false,\n        message: 'No wallet connected'\n      };\n    }\n    try {\n      setIsLoading(true);\n\n      // Generate a secure encryption key for the user\n      const key = Array.from(window.crypto.getRandomValues(new Uint8Array(32))).map(b => b.toString(16).padStart(2, '0')).join('');\n\n      // Create user profile according to UserProfile interface\n      const newUserProfile = {\n        walletAddress: wallet.account,\n        username,\n        email,\n        registrationTime: new Date().toISOString(),\n        isActive: true,\n        reputationScore: 0,\n        accessRoles: ['user']\n      };\n\n      // Store user data and encryption key in localStorage\n      localStorage.setItem(`user_${wallet.account}`, JSON.stringify(newUserProfile));\n      localStorage.setItem(`encryption_key_${wallet.account}`, key);\n\n      // Update state\n      setUserProfile(newUserProfile);\n      setIsRegistered(true);\n      setEncryptionKey(key);\n\n      // Seed activities with registration considered as login\n      try {\n        const initialActivities = [{\n          id: crypto.randomUUID(),\n          type: 'login',\n          details: 'Registered and logged in',\n          timestamp: new Date().toISOString()\n        }];\n        localStorage.setItem(`activities_${wallet.account}`, JSON.stringify(initialActivities));\n      } catch {}\n\n      // Copy the encryption key to clipboard\n      try {\n        await navigator.clipboard.writeText(key);\n        // Also alert the user with the generated key\n        try {\n          window.alert(`Registration successful!\\n\\nYour encryption key (copy kept in clipboard):\\n${key}\\n\\nStore this key safely; it is required for all file operations.`);\n        } catch (e) {\n          // no-op if alert blocked\n        }\n        return {\n          success: true,\n          message: 'Registration successful! Your encryption key has been copied to clipboard. Please keep it safe!',\n          encryptionKey: key\n        };\n      } catch (clipboardError) {\n        console.error('Failed to copy encryption key:', clipboardError);\n        try {\n          window.alert(`Registration successful!\\n\\nPlease copy and save your encryption key:\\n${key}`);\n        } catch (e) {\n          // no-op\n        }\n        return {\n          success: true,\n          message: `Registration successful! Please copy and save your encryption key: ${key}`,\n          encryptionKey: key\n        };\n      }\n    } catch (error) {\n      console.error('Registration failed:', error);\n      return {\n        success: false,\n        message: error instanceof Error ? error.message : 'Registration failed. Please try again.'\n      };\n    } finally {\n      setIsLoading(false);\n    }\n  }, [wallet.account]);\n  const updateUsername = useCallback(newUsername => {\n    if (!wallet.account || !userProfile) return;\n    const updated = {\n      ...userProfile,\n      username: newUsername\n    };\n    localStorage.setItem(`user_${wallet.account}`, JSON.stringify(updated));\n    setUserProfile(updated);\n  }, [wallet.account, userProfile]);\n  const getRecentActivities = useCallback((limit = 3) => {\n    return getActivities().slice(0, limit);\n  }, [getActivities]);\n  const getAllActivities = useCallback(() => {\n    return getActivities();\n  }, [getActivities]);\n  const getAllUsers = useCallback(async () => {\n    const users = [];\n    // Local users (same browser)\n    for (let i = 0; i < localStorage.length; i++) {\n      const key = localStorage.key(i);\n      if (!key) continue;\n      if (key.startsWith('user_')) {\n        try {\n          const parsed = JSON.parse(localStorage.getItem(key) || 'null');\n          if (parsed && parsed.walletAddress) users.push(parsed);\n        } catch {}\n      }\n    }\n\n    // Attempt to augment with on-chain users if connected and configured\n    try {\n      var _contracts$auth;\n      if (provider && contracts !== null && contracts !== void 0 && (_contracts$auth = contracts.auth) !== null && _contracts$auth !== void 0 && _contracts$auth.address) {\n        // Heuristic: scan recent UserRegistered events for a small block window\n        const ethProvider = provider;\n        const signer = await ethProvider.getSigner();\n        const contract = new ethers.Contract(contracts.auth.address, BSCIAMAuthABI, signer);\n        const currentBlock = await ethProvider.getBlockNumber();\n        const fromBlock = currentBlock - 5000 > 0 ? currentBlock - 5000 : 0; // last ~5000 blocks\n        // v6 queryFilter across fragments requires passing event name\n        const events = await contract.queryFilter('UserRegistered', fromBlock, currentBlock);\n        for (const ev of events) {\n          const args = ev.args;\n          const user = (args === null || args === void 0 ? void 0 : args.user) || (args === null || args === void 0 ? void 0 : args[0]);\n          if (!user) continue;\n          try {\n            const p = await contract.getUserProfile(user);\n            const profile = {\n              walletAddress: p.walletAddress,\n              username: p.username,\n              email: p.email,\n              registrationTime: new Date(Number(p.registrationTime) * 1000).toISOString(),\n              isActive: Boolean(p.isActive),\n              reputationScore: Number(p.reputationScore),\n              accessRoles: Array.from(p.accessRoles || [])\n            };\n            if (!users.find(u => u.walletAddress.toLowerCase() === profile.walletAddress.toLowerCase())) {\n              users.push(profile);\n            }\n          } catch {}\n        }\n      }\n    } catch (e) {\n      console.warn('On-chain user fetch skipped or failed:', e);\n    }\n    return users;\n  }, [provider]);\n  const value = {\n    wallet,\n    isRegistered,\n    userProfile,\n    isLoading,\n    error,\n    encryptionKey,\n    connectWallet,\n    disconnectWallet,\n    registerUser,\n    getEncryptionKey: getEncryptionKeyFromState,\n    validateEncryptionKey,\n    getStoredFiles,\n    storeFile,\n    uploadFile,\n    downloadFile: async (fileId, key) => {\n      // Implement download file logic here\n      console.log('Downloading file:', fileId, 'with key:', key);\n    },\n    deleteStoredFile,\n    getRecentActivities,\n    getAllActivities,\n    recordActivity,\n    updateUsername,\n    getAllUsers\n  };\n  return /*#__PURE__*/_jsxDEV(WalletContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 510,\n    columnNumber: 5\n  }, this);\n};\n_s(WalletProvider, \"FnjtaKfhIUU569KuBfJ4EbuDnts=\");\n_c = WalletProvider;\nexport const useWallet = () => {\n  _s2();\n  const context = useContext(WalletContext);\n  if (context === undefined) {\n    throw new Error('useWallet must be used within a WalletProvider');\n  }\n  return context;\n};\n\n// Extend Window interface for TypeScript\n_s2(useWallet, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"WalletProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","ethers","BSCIAMAuthABI","contracts","jsxDEV","_jsxDEV","WalletContext","undefined","WalletProvider","children","_s","wallet","setWallet","isConnected","account","chainId","balance","userProfile","setUserProfile","isRegistered","setIsRegistered","isLoading","setIsLoading","error","setError","encryptionKey","setEncryptionKey","provider","setProvider","signer","setSigner","initializeEncryptionKey","key","localStorage","getItem","getStoredFiles","files","JSON","parse","getActivities","raw","saveActivities","activities","setItem","stringify","bumpReputation","userRaw","updated","reputationScore","recordActivity","type","details","entry","id","crypto","randomUUID","timestamp","Date","toISOString","slice","getEncryptionKey","storeFile","file","Error","existingFileIndex","findIndex","f","name","uploadedAt","updatedFiles","deleteStoredFile","fileId","fileToDelete","find","filter","getEncryptionKeyFromState","uploadFile","encryptedData","storedFiles","fileExists","some","_f$metadata","metadata","lastModified","newFile","size","originalName","mimeType","console","checkRegistration","userData","removeItem","validateEncryptionKey","storedKey","disconnectWallet","connectWallet","window","ethereum","BrowserProvider","getSigner","address","getAddress","network","getNetwork","toString","registered","err","registerUser","username","email","success","message","Array","from","getRandomValues","Uint8Array","map","b","padStart","join","newUserProfile","walletAddress","registrationTime","isActive","accessRoles","initialActivities","navigator","clipboard","writeText","alert","e","clipboardError","updateUsername","newUsername","getRecentActivities","limit","getAllActivities","getAllUsers","users","i","length","startsWith","parsed","push","_contracts$auth","auth","ethProvider","contract","Contract","currentBlock","getBlockNumber","fromBlock","events","queryFilter","ev","args","user","p","getUserProfile","profile","Number","Boolean","u","toLowerCase","warn","value","downloadFile","log","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useWallet","_s2","context","$RefreshReg$"],"sources":["F:/Final Year Project/Project Implementation/frontend/src/context/WalletContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useCallback, ReactNode } from 'react';\nimport { ethers } from 'ethers';\nimport { BSCIAMAuthABI } from '../config/abi';\nimport contracts from '../config/contracts.json';\nimport { StoredFile } from '../types';\nimport { UserProfile } from '../types';\n\ndeclare global {\n  interface Window {\n    ethereum?: any;\n  }\n}\n\ninterface WalletState {\n  isConnected: boolean;\n  account: string | null;\n  chainId: string | null;\n  balance: string | null;\n}\n\ninterface WalletContextType {\n  // Wallet state\n  wallet: WalletState;\n  isRegistered: boolean;\n  userProfile: UserProfile | null;\n  isLoading: boolean;\n  error: string | null;\n  encryptionKey: string | null;\n  \n  // Wallet methods\n  connectWallet: () => Promise<void>;\n  disconnectWallet: () => void;\n  \n  // User methods\n  registerUser: (username: string, email?: string) => Promise<{ \n    success: boolean; \n    message: string; \n    encryptionKey?: string \n  }>;\n  \n  // Encryption methods\n  getEncryptionKey: () => string | null;\n  validateEncryptionKey: (key: string) => boolean;\n  \n  // File methods\n  getStoredFiles: () => StoredFile[];\n  storeFile: (file: StoredFile) => StoredFile[];\n  uploadFile: (file: File, encryptedData: any, key: string) => Promise<StoredFile>;\n  downloadFile: (fileId: string, key: string) => Promise<void>;\n  deleteStoredFile: (fileId: string) => void;\n\n  // Activity & profile\n  getRecentActivities: (limit?: number) => Array<{ id: string; type: string; details?: string; timestamp: string }>;\n  getAllActivities: () => Array<{ id: string; type: string; details?: string; timestamp: string }>;\n  recordActivity: (type: 'login' | 'upload' | 'download' | 'delete', details?: string) => void;\n  updateUsername: (newUsername: string) => void;\n  getAllUsers: () => Promise<UserProfile[]>;\n}\n\nconst WalletContext = createContext<WalletContextType | undefined>(undefined);\n\ninterface WalletProviderProps {\n  children: ReactNode;\n}\n\nexport const WalletProvider: React.FC<WalletProviderProps> = ({ children }) => {\n  const [wallet, setWallet] = useState<WalletState>({\n    isConnected: false,\n    account: null,\n    chainId: null,\n    balance: null,\n  });\n  \n  const [userProfile, setUserProfile] = useState<UserProfile | null>(null);\n  const [isRegistered, setIsRegistered] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [encryptionKey, setEncryptionKey] = useState<string | null>(null);\n\n  const [provider, setProvider] = useState<ethers.BrowserProvider | null>(null);\n  const [signer, setSigner] = useState<ethers.JsonRpcSigner | null>(null);\n\n  // Initialize encryption key for the current account\n  const initializeEncryptionKey = useCallback((account: string): string | null => {\n    const key = localStorage.getItem(`encryption_key_${account}`);\n    if (!key) return null;\n    setEncryptionKey(key);\n    return key;\n  }, []);\n\n  // Get stored files for the current user\n  const getStoredFiles = useCallback((): StoredFile[] => {\n    if (!wallet.account) return [];\n    const files = localStorage.getItem(`files_${wallet.account}`);\n    return files ? JSON.parse(files) : [];\n  }, [wallet.account]);\n\n  // Activity helpers\n  const getActivities = useCallback((): Array<{ id: string; type: string; details?: string; timestamp: string }> => {\n    if (!wallet.account) return [];\n    const raw = localStorage.getItem(`activities_${wallet.account}`);\n    return raw ? JSON.parse(raw) : [];\n  }, [wallet.account]);\n\n  const saveActivities = useCallback((activities: Array<{ id: string; type: string; details?: string; timestamp: string }>) => {\n    if (!wallet.account) return;\n    localStorage.setItem(`activities_${wallet.account}`, JSON.stringify(activities));\n  }, [wallet.account]);\n\n  const bumpReputation = useCallback(() => {\n    if (!wallet.account) return;\n    const userRaw = localStorage.getItem(`user_${wallet.account}`);\n    if (!userRaw) return;\n    const updated: UserProfile = { ...JSON.parse(userRaw), reputationScore: (JSON.parse(userRaw).reputationScore || 0) + 10 };\n    localStorage.setItem(`user_${wallet.account}`, JSON.stringify(updated));\n    setUserProfile(updated);\n  }, [wallet.account]);\n\n  const recordActivity = useCallback((type: 'login' | 'upload' | 'download' | 'delete', details?: string) => {\n    if (!wallet.account) return;\n    const activities = getActivities();\n    const entry = { id: crypto.randomUUID(), type, details, timestamp: new Date().toISOString() };\n    const updated = [entry, ...activities].slice(0, 100);\n    saveActivities(updated);\n    bumpReputation();\n  }, [wallet.account, getActivities, saveActivities, bumpReputation]);\n\n  // Get the user's encryption key\n  const getEncryptionKey = useCallback((): string | null => {\n    if (!wallet.account) return null;\n    return localStorage.getItem(`encryption_key_${wallet.account}`);\n  }, [wallet.account]);\n\n  // Store a new file\n  const storeFile = useCallback((file: StoredFile) => {\n    if (!wallet.account) {\n      throw new Error('No wallet connected');\n    }\n    \n    const files = getStoredFiles();\n    // Check if file with same name already exists\n    const existingFileIndex = files.findIndex(f => f.name === file.name && f.uploadedAt === file.uploadedAt);\n    \n    let updatedFiles;\n    if (existingFileIndex >= 0) {\n      // Update existing file\n      updatedFiles = [...files];\n      updatedFiles[existingFileIndex] = file;\n    } else {\n      // Add new file\n      updatedFiles = [...files, file];\n    }\n    \n    localStorage.setItem(\n      `files_${wallet.account}`, \n      JSON.stringify(updatedFiles)\n    );\n    // Record upload activity\n    try { recordActivity('upload', file.name); } catch {}\n    return updatedFiles;\n  }, [wallet.account, getStoredFiles, recordActivity]);\n\n  // Delete a file\n  const deleteStoredFile = useCallback((fileId: string) => {\n    if (!wallet.account) {\n      throw new Error('No wallet connected');\n    }\n    \n    const files = getStoredFiles();\n    const fileToDelete = files.find(f => f.id === fileId);\n    \n    if (!fileToDelete) {\n      throw new Error('File not found');\n    }\n    \n    const updatedFiles = files.filter(file => file.id !== fileId);\n    \n    localStorage.setItem(\n      `files_${wallet.account}`, \n      JSON.stringify(updatedFiles)\n    );\n    try { recordActivity('delete', fileToDelete.name); } catch {}\n    return updatedFiles;\n  }, [wallet.account, getStoredFiles, recordActivity]);\n\n  // Get the current encryption key\n  const getEncryptionKeyFromState = useCallback((): string | null => {\n    return encryptionKey;\n  }, [encryptionKey]);\n\n  // Upload a file with encryption\n  const uploadFile = useCallback(async (file: File, encryptedData: any, key: string): Promise<StoredFile> => {\n    if (!wallet.account) {\n      throw new Error('No wallet connected');\n    }\n    \n    if (!key) {\n      throw new Error('Encryption key is required');\n    }\n    \n    if (!encryptedData) {\n      throw new Error('No encrypted data provided');\n    }\n    \n    try {\n      setIsLoading(true);\n      const storedFiles = getStoredFiles();\n      \n      // Check if file with same name already exists\n      const fileExists = storedFiles.some(f => \n        f.name === file.name && \n        f.metadata?.lastModified === file.lastModified\n      );\n      \n      if (fileExists) {\n        throw new Error('A file with this name already exists');\n      }\n      \n      const newFile: StoredFile = {\n        id: crypto.randomUUID(),\n        name: file.name,\n        type: file.type,\n        size: file.size,\n        uploadedAt: new Date().toISOString(),\n        encryptedData,\n        metadata: {\n          name: file.name,\n          originalName: file.name,\n          type: file.type,\n          mimeType: file.type,\n          size: file.size,\n          lastModified: file.lastModified\n        }\n      };\n      \n      const updatedFiles = [...storedFiles, newFile];\n      localStorage.setItem(`files_${wallet.account}`, JSON.stringify(updatedFiles));\n      \n      return newFile;\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [wallet.account, getStoredFiles]);\n\n  // Check if user is already registered\n  const checkRegistration = useCallback(async (account: string): Promise<boolean> => {\n    try {\n      if (!account) return false;\n      \n      const userData = localStorage.getItem(`user_${account}`);\n      const encryptionKey = localStorage.getItem(`encryption_key_${account}`);\n      \n      if (userData && encryptionKey) {\n        const userProfile = JSON.parse(userData) as UserProfile;\n        setUserProfile(userProfile);\n        setEncryptionKey(encryptionKey);\n        setIsRegistered(true);\n        return true;\n      }\n      \n      // Clear any partial data if registration is not complete\n      localStorage.removeItem(`user_${account}`);\n      localStorage.removeItem(`encryption_key_${account}`);\n      return false;\n    } catch (error) {\n      console.error('Error checking registration:', error);\n      setError('Failed to check user registration.');\n      return false;\n    }\n  }, [initializeEncryptionKey]);\n\n  // Validate encryption key against the stored key\n  const validateEncryptionKey = useCallback((key: string): boolean => {\n    if (!wallet.account) return false;\n    const storedKey = localStorage.getItem(`encryption_key_${wallet.account}`);\n    return key === storedKey;\n  }, [wallet.account]);\n\n  // Disconnect wallet\n  const disconnectWallet = useCallback(() => {\n    // Note: We don't clear localStorage here to preserve user data for future logins\n    setWallet({\n      isConnected: false,\n      account: null,\n      chainId: null,\n      balance: null,\n    });\n    setUserProfile(null);\n    setIsRegistered(false);\n    setIsLoading(false);\n    setError(null);\n    setProvider(null);\n    setSigner(null);\n  }, []);\n\n  // Connect wallet\n  const connectWallet = useCallback(async () => {\n    if (typeof window.ethereum === 'undefined') {\n      setError('Please install MetaMask!');\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const signer = await provider.getSigner();\n      const address = await signer.getAddress();\n      const network = await provider.getNetwork();\n      \n      setProvider(provider);\n      setSigner(signer);\n      setWallet({\n        isConnected: true,\n        account: address,\n        chainId: network.chainId.toString(),\n        balance: null,\n      });\n      setError(null);\n\n      // Check if user is registered\n      const registered = await checkRegistration(address);\n      if (registered) {\n        try { recordActivity('login', 'Wallet connected'); } catch {}\n      }\n    } catch (err) {\n      console.error('Error connecting wallet:', err);\n      setError('Failed to connect wallet. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [checkRegistration]);\n\n  // Register a new user\n  const registerUser = useCallback(async (username: string, email: string = '') => {\n    if (!wallet.account) {\n      return { success: false, message: 'No wallet connected' };\n    }\n\n    try {\n      setIsLoading(true);\n      \n      // Generate a secure encryption key for the user\n      const key = Array.from(window.crypto.getRandomValues(new Uint8Array(32)))\n        .map(b => b.toString(16).padStart(2, '0'))\n        .join('');\n      \n      // Create user profile according to UserProfile interface\n      const newUserProfile: UserProfile = {\n        walletAddress: wallet.account,\n        username,\n        email,\n        registrationTime: new Date().toISOString(),\n        isActive: true,\n        reputationScore: 0,\n        accessRoles: ['user']\n      };\n\n      // Store user data and encryption key in localStorage\n      localStorage.setItem(`user_${wallet.account}`, JSON.stringify(newUserProfile));\n      localStorage.setItem(`encryption_key_${wallet.account}`, key);\n      \n      // Update state\n      setUserProfile(newUserProfile);\n      setIsRegistered(true);\n      setEncryptionKey(key);\n\n      // Seed activities with registration considered as login\n      try {\n        const initialActivities = [{ id: crypto.randomUUID(), type: 'login', details: 'Registered and logged in', timestamp: new Date().toISOString() }];\n        localStorage.setItem(`activities_${wallet.account}`, JSON.stringify(initialActivities));\n      } catch {}\n      \n      // Copy the encryption key to clipboard\n      try {\n        await navigator.clipboard.writeText(key);\n        // Also alert the user with the generated key\n        try {\n          window.alert(`Registration successful!\\n\\nYour encryption key (copy kept in clipboard):\\n${key}\\n\\nStore this key safely; it is required for all file operations.`);\n        } catch (e) {\n          // no-op if alert blocked\n        }\n        return { \n          success: true, \n          message: 'Registration successful! Your encryption key has been copied to clipboard. Please keep it safe!',\n          encryptionKey: key\n        };\n      } catch (clipboardError) {\n        console.error('Failed to copy encryption key:', clipboardError);\n        try {\n          window.alert(`Registration successful!\\n\\nPlease copy and save your encryption key:\\n${key}`);\n        } catch (e) {\n          // no-op\n        }\n        return { \n          success: true, \n          message: `Registration successful! Please copy and save your encryption key: ${key}`,\n          encryptionKey: key\n        };\n      }\n    } catch (error) {\n      console.error('Registration failed:', error);\n      return { \n        success: false, \n        message: error instanceof Error ? error.message : 'Registration failed. Please try again.'\n      };\n    } finally {\n      setIsLoading(false);\n    }\n  }, [wallet.account]);\n\n  const updateUsername = useCallback((newUsername: string) => {\n    if (!wallet.account || !userProfile) return;\n    const updated: UserProfile = { ...userProfile, username: newUsername };\n    localStorage.setItem(`user_${wallet.account}`, JSON.stringify(updated));\n    setUserProfile(updated);\n  }, [wallet.account, userProfile]);\n\n  const getRecentActivities = useCallback((limit: number = 3) => {\n    return getActivities().slice(0, limit);\n  }, [getActivities]);\n\n  const getAllActivities = useCallback(() => {\n    return getActivities();\n  }, [getActivities]);\n\n  const getAllUsers = useCallback(async (): Promise<UserProfile[]> => {\n    const users: UserProfile[] = [];\n    // Local users (same browser)\n    for (let i = 0; i < localStorage.length; i++) {\n      const key = localStorage.key(i);\n      if (!key) continue;\n      if (key.startsWith('user_')) {\n        try {\n          const parsed = JSON.parse(localStorage.getItem(key) || 'null');\n          if (parsed && parsed.walletAddress) users.push(parsed);\n        } catch {}\n      }\n    }\n\n    // Attempt to augment with on-chain users if connected and configured\n    try {\n      if (provider && contracts?.auth?.address) {\n        // Heuristic: scan recent UserRegistered events for a small block window\n        const ethProvider = provider as unknown as ethers.BrowserProvider;\n        const signer = await ethProvider.getSigner();\n        const contract = new ethers.Contract(contracts.auth.address, BSCIAMAuthABI, signer);\n        const currentBlock = await ethProvider.getBlockNumber();\n        const fromBlock = currentBlock - 5000 > 0 ? currentBlock - 5000 : 0; // last ~5000 blocks\n        // v6 queryFilter across fragments requires passing event name\n        const events = await contract.queryFilter('UserRegistered', fromBlock, currentBlock);\n        for (const ev of events as any[]) {\n          const args: any = (ev as any).args;\n          const user: string = args?.user || args?.[0];\n          if (!user) continue;\n          try {\n            const p: any = await contract.getUserProfile(user);\n            const profile: UserProfile = {\n              walletAddress: p.walletAddress,\n              username: p.username,\n              email: p.email,\n              registrationTime: new Date(Number(p.registrationTime) * 1000).toISOString(),\n              isActive: Boolean(p.isActive),\n              reputationScore: Number(p.reputationScore),\n              accessRoles: Array.from(p.accessRoles || [])\n            };\n            if (!users.find(u => u.walletAddress.toLowerCase() === profile.walletAddress.toLowerCase())) {\n              users.push(profile);\n            }\n          } catch {}\n        }\n      }\n    } catch (e) {\n      console.warn('On-chain user fetch skipped or failed:', e);\n    }\n\n    return users;\n  }, [provider]);\n\n  const value: WalletContextType = {\n    wallet,\n    isRegistered,\n    userProfile,\n    isLoading,\n    error,\n    encryptionKey,\n    connectWallet,\n    disconnectWallet,\n    registerUser,\n    getEncryptionKey: getEncryptionKeyFromState,\n    validateEncryptionKey,\n    getStoredFiles,\n    storeFile,\n    uploadFile,\n    downloadFile: async (fileId: string, key: string) => {\n      // Implement download file logic here\n      console.log('Downloading file:', fileId, 'with key:', key);\n    },\n    deleteStoredFile,\n    getRecentActivities,\n    getAllActivities,\n    recordActivity,\n    updateUsername,\n    getAllUsers,\n  };\n\n  return (\n    <WalletContext.Provider value={value}>\n      {children}\n    </WalletContext.Provider>\n  );\n};\n\nexport const useWallet = (): WalletContextType => {\n  const context = useContext(WalletContext);\n  if (context === undefined) {\n    throw new Error('useWallet must be used within a WalletProvider');\n  }\n  return context;\n};\n\n// Extend Window interface for TypeScript\ndeclare global {\n  interface Window {\n    ethereum?: any;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}