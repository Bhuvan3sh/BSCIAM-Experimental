{"ast":null,"code":"var _jsxFileName = \"F:\\\\Final Year Project\\\\Project Implementation\\\\frontend\\\\src\\\\context\\\\WalletContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useCallback } from 'react';\nimport { ethers } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WalletContext = /*#__PURE__*/createContext(undefined);\nexport const WalletProvider = ({\n  children\n}) => {\n  _s();\n  const [wallet, setWallet] = useState({\n    isConnected: false,\n    account: null,\n    chainId: null,\n    balance: null\n  });\n  const [userProfile, setUserProfile] = useState(null);\n  const [isRegistered, setIsRegistered] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [encryptionKey, setEncryptionKey] = useState(null);\n  const [provider, setProvider] = useState(null);\n  const [signer, setSigner] = useState(null);\n\n  // One-time storage reset on first app load to start fresh\n  React.useEffect(() => {\n    try {\n      const hasCleared = sessionStorage.getItem('bsciam_storage_cleared');\n      if (!hasCleared) {\n        const keysToRemove = [];\n        for (let i = 0; i < localStorage.length; i++) {\n          const key = localStorage.key(i);\n          if (!key) continue;\n          if (key.startsWith('user_') || key.startsWith('files_') || key.startsWith('encryption_key_')) {\n            keysToRemove.push(key);\n          }\n        }\n        keysToRemove.forEach(k => localStorage.removeItem(k));\n        sessionStorage.setItem('bsciam_storage_cleared', 'true');\n      }\n    } catch (e) {\n      console.error('Failed to clear previous app storage state:', e);\n    }\n  }, []);\n\n  // Initialize encryption key for the current account\n  const initializeEncryptionKey = useCallback(account => {\n    const key = localStorage.getItem(`encryption_key_${account}`);\n    if (!key) return null;\n    setEncryptionKey(key);\n    return key;\n  }, []);\n\n  // Get stored files for the current user\n  const getStoredFiles = useCallback(() => {\n    if (!wallet.account) return [];\n    const files = localStorage.getItem(`files_${wallet.account}`);\n    return files ? JSON.parse(files) : [];\n  }, [wallet.account]);\n\n  // Get the user's encryption key\n  const getEncryptionKey = useCallback(() => {\n    if (!wallet.account) return null;\n    return localStorage.getItem(`encryption_key_${wallet.account}`);\n  }, [wallet.account]);\n\n  // Store a new file\n  const storeFile = useCallback(file => {\n    if (!wallet.account) {\n      throw new Error('No wallet connected');\n    }\n    const files = getStoredFiles();\n    // Check if file with same name already exists\n    const existingFileIndex = files.findIndex(f => f.name === file.name && f.uploadedAt === file.uploadedAt);\n    let updatedFiles;\n    if (existingFileIndex >= 0) {\n      // Update existing file\n      updatedFiles = [...files];\n      updatedFiles[existingFileIndex] = file;\n    } else {\n      // Add new file\n      updatedFiles = [...files, file];\n    }\n    localStorage.setItem(`files_${wallet.account}`, JSON.stringify(updatedFiles));\n    return updatedFiles;\n  }, [wallet.account, getStoredFiles]);\n\n  // Delete a file\n  const deleteStoredFile = useCallback(fileId => {\n    if (!wallet.account) {\n      throw new Error('No wallet connected');\n    }\n    const files = getStoredFiles();\n    const fileToDelete = files.find(f => f.id === fileId);\n    if (!fileToDelete) {\n      throw new Error('File not found');\n    }\n    const updatedFiles = files.filter(file => file.id !== fileId);\n    localStorage.setItem(`files_${wallet.account}`, JSON.stringify(updatedFiles));\n    return updatedFiles;\n  }, [wallet.account, getStoredFiles]);\n\n  // Get the current encryption key\n  const getEncryptionKeyFromState = useCallback(() => {\n    return encryptionKey;\n  }, [encryptionKey]);\n\n  // Upload a file with encryption\n  const uploadFile = useCallback(async (file, encryptedData, key) => {\n    if (!wallet.account) {\n      throw new Error('No wallet connected');\n    }\n    if (!key) {\n      throw new Error('Encryption key is required');\n    }\n    if (!encryptedData) {\n      throw new Error('No encrypted data provided');\n    }\n    try {\n      setIsLoading(true);\n      const storedFiles = getStoredFiles();\n\n      // Check if file with same name already exists\n      const fileExists = storedFiles.some(f => {\n        var _f$metadata;\n        return f.name === file.name && ((_f$metadata = f.metadata) === null || _f$metadata === void 0 ? void 0 : _f$metadata.lastModified) === file.lastModified;\n      });\n      if (fileExists) {\n        throw new Error('A file with this name already exists');\n      }\n      const newFile = {\n        id: crypto.randomUUID(),\n        name: file.name,\n        type: file.type,\n        size: file.size,\n        uploadedAt: new Date().toISOString(),\n        encryptedData,\n        metadata: {\n          name: file.name,\n          originalName: file.name,\n          type: file.type,\n          mimeType: file.type,\n          size: file.size,\n          lastModified: file.lastModified\n        }\n      };\n      const updatedFiles = [...storedFiles, newFile];\n      localStorage.setItem(`files_${wallet.account}`, JSON.stringify(updatedFiles));\n      return newFile;\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [wallet.account, getStoredFiles]);\n\n  // Check if user is already registered\n  const checkRegistration = useCallback(async account => {\n    try {\n      if (!account) return false;\n      const userData = localStorage.getItem(`user_${account}`);\n      const encryptionKey = localStorage.getItem(`encryption_key_${account}`);\n      if (userData && encryptionKey) {\n        const userProfile = JSON.parse(userData);\n        setUserProfile(userProfile);\n        setEncryptionKey(encryptionKey);\n        setIsRegistered(true);\n        return true;\n      }\n\n      // Clear any partial data if registration is not complete\n      localStorage.removeItem(`user_${account}`);\n      localStorage.removeItem(`encryption_key_${account}`);\n      return false;\n    } catch (error) {\n      console.error('Error checking registration:', error);\n      setError('Failed to check user registration.');\n      return false;\n    }\n  }, [initializeEncryptionKey]);\n\n  // Validate encryption key against the stored key\n  const validateEncryptionKey = useCallback(key => {\n    if (!wallet.account) return false;\n    const storedKey = localStorage.getItem(`encryption_key_${wallet.account}`);\n    return key === storedKey;\n  }, [wallet.account]);\n\n  // Disconnect wallet\n  const disconnectWallet = useCallback(() => {\n    // Note: We don't clear localStorage here to preserve user data for future logins\n    setWallet({\n      isConnected: false,\n      account: null,\n      chainId: null,\n      balance: null\n    });\n    setUserProfile(null);\n    setIsRegistered(false);\n    setIsLoading(false);\n    setError(null);\n    setProvider(null);\n    setSigner(null);\n  }, []);\n\n  // Connect wallet\n  const connectWallet = useCallback(async () => {\n    if (typeof window.ethereum === 'undefined') {\n      setError('Please install MetaMask!');\n      return;\n    }\n    try {\n      setIsLoading(true);\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const signer = await provider.getSigner();\n      const address = await signer.getAddress();\n      const network = await provider.getNetwork();\n      setProvider(provider);\n      setSigner(signer);\n      setWallet({\n        isConnected: true,\n        account: address,\n        chainId: network.chainId.toString(),\n        balance: null\n      });\n      setError(null);\n\n      // Check if user is registered\n      await checkRegistration(address);\n    } catch (err) {\n      console.error('Error connecting wallet:', err);\n      setError('Failed to connect wallet. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [checkRegistration]);\n\n  // Register a new user\n  const registerUser = useCallback(async (username, email = '') => {\n    if (!wallet.account) {\n      return {\n        success: false,\n        message: 'No wallet connected'\n      };\n    }\n    try {\n      setIsLoading(true);\n\n      // Generate a secure encryption key for the user\n      const key = Array.from(window.crypto.getRandomValues(new Uint8Array(32))).map(b => b.toString(16).padStart(2, '0')).join('');\n\n      // Create user profile according to UserProfile interface\n      const newUserProfile = {\n        walletAddress: wallet.account,\n        username,\n        email,\n        registrationTime: new Date().toISOString(),\n        isActive: true,\n        reputationScore: 0,\n        accessRoles: ['user']\n      };\n\n      // Store user data and encryption key in localStorage\n      localStorage.setItem(`user_${wallet.account}`, JSON.stringify(newUserProfile));\n      localStorage.setItem(`encryption_key_${wallet.account}`, key);\n\n      // Update state\n      setUserProfile(newUserProfile);\n      setIsRegistered(true);\n      setEncryptionKey(key);\n\n      // Copy the encryption key to clipboard\n      try {\n        await navigator.clipboard.writeText(key);\n        // Also alert the user with the generated key\n        try {\n          window.alert(`Registration successful!\\n\\nYour encryption key (copy kept in clipboard):\\n${key}\\n\\nStore this key safely; it is required for all file operations.`);\n        } catch (e) {\n          // no-op if alert blocked\n        }\n        return {\n          success: true,\n          message: 'Registration successful! Your encryption key has been copied to clipboard. Please keep it safe!',\n          encryptionKey: key\n        };\n      } catch (clipboardError) {\n        console.error('Failed to copy encryption key:', clipboardError);\n        try {\n          window.alert(`Registration successful!\\n\\nPlease copy and save your encryption key:\\n${key}`);\n        } catch (e) {\n          // no-op\n        }\n        return {\n          success: true,\n          message: `Registration successful! Please copy and save your encryption key: ${key}`,\n          encryptionKey: key\n        };\n      }\n    } catch (error) {\n      console.error('Registration failed:', error);\n      return {\n        success: false,\n        message: error instanceof Error ? error.message : 'Registration failed. Please try again.'\n      };\n    } finally {\n      setIsLoading(false);\n    }\n  }, [wallet.account]);\n  const value = {\n    wallet,\n    isRegistered,\n    userProfile,\n    isLoading,\n    error,\n    encryptionKey,\n    connectWallet,\n    disconnectWallet,\n    registerUser,\n    getEncryptionKey: getEncryptionKeyFromState,\n    validateEncryptionKey,\n    getStoredFiles,\n    storeFile,\n    uploadFile,\n    downloadFile: async (fileId, key) => {\n      // Implement download file logic here\n      console.log('Downloading file:', fileId, 'with key:', key);\n    },\n    deleteStoredFile\n  };\n  return /*#__PURE__*/_jsxDEV(WalletContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 413,\n    columnNumber: 5\n  }, this);\n};\n_s(WalletProvider, \"6OCge4F6lcNvxEWEckugyqZXYLg=\");\n_c = WalletProvider;\nexport const useWallet = () => {\n  _s2();\n  const context = useContext(WalletContext);\n  if (context === undefined) {\n    throw new Error('useWallet must be used within a WalletProvider');\n  }\n  return context;\n};\n\n// Extend Window interface for TypeScript\n_s2(useWallet, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"WalletProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","ethers","jsxDEV","_jsxDEV","WalletContext","undefined","WalletProvider","children","_s","wallet","setWallet","isConnected","account","chainId","balance","userProfile","setUserProfile","isRegistered","setIsRegistered","isLoading","setIsLoading","error","setError","encryptionKey","setEncryptionKey","provider","setProvider","signer","setSigner","useEffect","hasCleared","sessionStorage","getItem","keysToRemove","i","localStorage","length","key","startsWith","push","forEach","k","removeItem","setItem","e","console","initializeEncryptionKey","getStoredFiles","files","JSON","parse","getEncryptionKey","storeFile","file","Error","existingFileIndex","findIndex","f","name","uploadedAt","updatedFiles","stringify","deleteStoredFile","fileId","fileToDelete","find","id","filter","getEncryptionKeyFromState","uploadFile","encryptedData","storedFiles","fileExists","some","_f$metadata","metadata","lastModified","newFile","crypto","randomUUID","type","size","Date","toISOString","originalName","mimeType","checkRegistration","userData","validateEncryptionKey","storedKey","disconnectWallet","connectWallet","window","ethereum","BrowserProvider","getSigner","address","getAddress","network","getNetwork","toString","err","registerUser","username","email","success","message","Array","from","getRandomValues","Uint8Array","map","b","padStart","join","newUserProfile","walletAddress","registrationTime","isActive","reputationScore","accessRoles","navigator","clipboard","writeText","alert","clipboardError","value","downloadFile","log","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useWallet","_s2","context","$RefreshReg$"],"sources":["F:/Final Year Project/Project Implementation/frontend/src/context/WalletContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useCallback, ReactNode } from 'react';\nimport { ethers } from 'ethers';\nimport { StoredFile } from '../types';\nimport { UserProfile } from '../types';\n\ndeclare global {\n  interface Window {\n    ethereum?: any;\n  }\n}\n\ninterface WalletState {\n  isConnected: boolean;\n  account: string | null;\n  chainId: string | null;\n  balance: string | null;\n}\n\ninterface WalletContextType {\n  // Wallet state\n  wallet: WalletState;\n  isRegistered: boolean;\n  userProfile: UserProfile | null;\n  isLoading: boolean;\n  error: string | null;\n  encryptionKey: string | null;\n  \n  // Wallet methods\n  connectWallet: () => Promise<void>;\n  disconnectWallet: () => void;\n  \n  // User methods\n  registerUser: (username: string, email?: string) => Promise<{ \n    success: boolean; \n    message: string; \n    encryptionKey?: string \n  }>;\n  \n  // Encryption methods\n  getEncryptionKey: () => string | null;\n  validateEncryptionKey: (key: string) => boolean;\n  \n  // File methods\n  getStoredFiles: () => StoredFile[];\n  storeFile: (file: StoredFile) => StoredFile[];\n  uploadFile: (file: File, encryptedData: any, key: string) => Promise<StoredFile>;\n  downloadFile: (fileId: string, key: string) => Promise<void>;\n  deleteStoredFile: (fileId: string) => void;\n}\n\nconst WalletContext = createContext<WalletContextType | undefined>(undefined);\n\ninterface WalletProviderProps {\n  children: ReactNode;\n}\n\nexport const WalletProvider: React.FC<WalletProviderProps> = ({ children }) => {\n  const [wallet, setWallet] = useState<WalletState>({\n    isConnected: false,\n    account: null,\n    chainId: null,\n    balance: null,\n  });\n  \n  const [userProfile, setUserProfile] = useState<UserProfile | null>(null);\n  const [isRegistered, setIsRegistered] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [encryptionKey, setEncryptionKey] = useState<string | null>(null);\n\n  const [provider, setProvider] = useState<ethers.BrowserProvider | null>(null);\n  const [signer, setSigner] = useState<ethers.JsonRpcSigner | null>(null);\n\n  // One-time storage reset on first app load to start fresh\n  React.useEffect(() => {\n    try {\n      const hasCleared = sessionStorage.getItem('bsciam_storage_cleared');\n      if (!hasCleared) {\n        const keysToRemove: string[] = [];\n        for (let i = 0; i < localStorage.length; i++) {\n          const key = localStorage.key(i);\n          if (!key) continue;\n          if (\n            key.startsWith('user_') ||\n            key.startsWith('files_') ||\n            key.startsWith('encryption_key_')\n          ) {\n            keysToRemove.push(key);\n          }\n        }\n        keysToRemove.forEach(k => localStorage.removeItem(k));\n        sessionStorage.setItem('bsciam_storage_cleared', 'true');\n      }\n    } catch (e) {\n      console.error('Failed to clear previous app storage state:', e);\n    }\n  }, []);\n\n  // Initialize encryption key for the current account\n  const initializeEncryptionKey = useCallback((account: string): string | null => {\n    const key = localStorage.getItem(`encryption_key_${account}`);\n    if (!key) return null;\n    setEncryptionKey(key);\n    return key;\n  }, []);\n\n  // Get stored files for the current user\n  const getStoredFiles = useCallback((): StoredFile[] => {\n    if (!wallet.account) return [];\n    const files = localStorage.getItem(`files_${wallet.account}`);\n    return files ? JSON.parse(files) : [];\n  }, [wallet.account]);\n\n  // Get the user's encryption key\n  const getEncryptionKey = useCallback((): string | null => {\n    if (!wallet.account) return null;\n    return localStorage.getItem(`encryption_key_${wallet.account}`);\n  }, [wallet.account]);\n\n  // Store a new file\n  const storeFile = useCallback((file: StoredFile) => {\n    if (!wallet.account) {\n      throw new Error('No wallet connected');\n    }\n    \n    const files = getStoredFiles();\n    // Check if file with same name already exists\n    const existingFileIndex = files.findIndex(f => f.name === file.name && f.uploadedAt === file.uploadedAt);\n    \n    let updatedFiles;\n    if (existingFileIndex >= 0) {\n      // Update existing file\n      updatedFiles = [...files];\n      updatedFiles[existingFileIndex] = file;\n    } else {\n      // Add new file\n      updatedFiles = [...files, file];\n    }\n    \n    localStorage.setItem(\n      `files_${wallet.account}`, \n      JSON.stringify(updatedFiles)\n    );\n    \n    return updatedFiles;\n  }, [wallet.account, getStoredFiles]);\n\n  // Delete a file\n  const deleteStoredFile = useCallback((fileId: string) => {\n    if (!wallet.account) {\n      throw new Error('No wallet connected');\n    }\n    \n    const files = getStoredFiles();\n    const fileToDelete = files.find(f => f.id === fileId);\n    \n    if (!fileToDelete) {\n      throw new Error('File not found');\n    }\n    \n    const updatedFiles = files.filter(file => file.id !== fileId);\n    \n    localStorage.setItem(\n      `files_${wallet.account}`, \n      JSON.stringify(updatedFiles)\n    );\n    \n    return updatedFiles;\n  }, [wallet.account, getStoredFiles]);\n\n  // Get the current encryption key\n  const getEncryptionKeyFromState = useCallback((): string | null => {\n    return encryptionKey;\n  }, [encryptionKey]);\n\n  // Upload a file with encryption\n  const uploadFile = useCallback(async (file: File, encryptedData: any, key: string): Promise<StoredFile> => {\n    if (!wallet.account) {\n      throw new Error('No wallet connected');\n    }\n    \n    if (!key) {\n      throw new Error('Encryption key is required');\n    }\n    \n    if (!encryptedData) {\n      throw new Error('No encrypted data provided');\n    }\n    \n    try {\n      setIsLoading(true);\n      const storedFiles = getStoredFiles();\n      \n      // Check if file with same name already exists\n      const fileExists = storedFiles.some(f => \n        f.name === file.name && \n        f.metadata?.lastModified === file.lastModified\n      );\n      \n      if (fileExists) {\n        throw new Error('A file with this name already exists');\n      }\n      \n      const newFile: StoredFile = {\n        id: crypto.randomUUID(),\n        name: file.name,\n        type: file.type,\n        size: file.size,\n        uploadedAt: new Date().toISOString(),\n        encryptedData,\n        metadata: {\n          name: file.name,\n          originalName: file.name,\n          type: file.type,\n          mimeType: file.type,\n          size: file.size,\n          lastModified: file.lastModified\n        }\n      };\n      \n      const updatedFiles = [...storedFiles, newFile];\n      localStorage.setItem(`files_${wallet.account}`, JSON.stringify(updatedFiles));\n      \n      return newFile;\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [wallet.account, getStoredFiles]);\n\n  // Check if user is already registered\n  const checkRegistration = useCallback(async (account: string): Promise<boolean> => {\n    try {\n      if (!account) return false;\n      \n      const userData = localStorage.getItem(`user_${account}`);\n      const encryptionKey = localStorage.getItem(`encryption_key_${account}`);\n      \n      if (userData && encryptionKey) {\n        const userProfile = JSON.parse(userData) as UserProfile;\n        setUserProfile(userProfile);\n        setEncryptionKey(encryptionKey);\n        setIsRegistered(true);\n        return true;\n      }\n      \n      // Clear any partial data if registration is not complete\n      localStorage.removeItem(`user_${account}`);\n      localStorage.removeItem(`encryption_key_${account}`);\n      return false;\n    } catch (error) {\n      console.error('Error checking registration:', error);\n      setError('Failed to check user registration.');\n      return false;\n    }\n  }, [initializeEncryptionKey]);\n\n  // Validate encryption key against the stored key\n  const validateEncryptionKey = useCallback((key: string): boolean => {\n    if (!wallet.account) return false;\n    const storedKey = localStorage.getItem(`encryption_key_${wallet.account}`);\n    return key === storedKey;\n  }, [wallet.account]);\n\n  // Disconnect wallet\n  const disconnectWallet = useCallback(() => {\n    // Note: We don't clear localStorage here to preserve user data for future logins\n    setWallet({\n      isConnected: false,\n      account: null,\n      chainId: null,\n      balance: null,\n    });\n    setUserProfile(null);\n    setIsRegistered(false);\n    setIsLoading(false);\n    setError(null);\n    setProvider(null);\n    setSigner(null);\n  }, []);\n\n  // Connect wallet\n  const connectWallet = useCallback(async () => {\n    if (typeof window.ethereum === 'undefined') {\n      setError('Please install MetaMask!');\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const signer = await provider.getSigner();\n      const address = await signer.getAddress();\n      const network = await provider.getNetwork();\n      \n      setProvider(provider);\n      setSigner(signer);\n      setWallet({\n        isConnected: true,\n        account: address,\n        chainId: network.chainId.toString(),\n        balance: null,\n      });\n      setError(null);\n\n      // Check if user is registered\n      await checkRegistration(address);\n    } catch (err) {\n      console.error('Error connecting wallet:', err);\n      setError('Failed to connect wallet. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [checkRegistration]);\n\n  // Register a new user\n  const registerUser = useCallback(async (username: string, email: string = '') => {\n    if (!wallet.account) {\n      return { success: false, message: 'No wallet connected' };\n    }\n\n    try {\n      setIsLoading(true);\n      \n      // Generate a secure encryption key for the user\n      const key = Array.from(window.crypto.getRandomValues(new Uint8Array(32)))\n        .map(b => b.toString(16).padStart(2, '0'))\n        .join('');\n      \n      // Create user profile according to UserProfile interface\n      const newUserProfile: UserProfile = {\n        walletAddress: wallet.account,\n        username,\n        email,\n        registrationTime: new Date().toISOString(),\n        isActive: true,\n        reputationScore: 0,\n        accessRoles: ['user']\n      };\n\n      // Store user data and encryption key in localStorage\n      localStorage.setItem(`user_${wallet.account}`, JSON.stringify(newUserProfile));\n      localStorage.setItem(`encryption_key_${wallet.account}`, key);\n      \n      // Update state\n      setUserProfile(newUserProfile);\n      setIsRegistered(true);\n      setEncryptionKey(key);\n      \n      // Copy the encryption key to clipboard\n      try {\n        await navigator.clipboard.writeText(key);\n        // Also alert the user with the generated key\n        try {\n          window.alert(`Registration successful!\\n\\nYour encryption key (copy kept in clipboard):\\n${key}\\n\\nStore this key safely; it is required for all file operations.`);\n        } catch (e) {\n          // no-op if alert blocked\n        }\n        return { \n          success: true, \n          message: 'Registration successful! Your encryption key has been copied to clipboard. Please keep it safe!',\n          encryptionKey: key\n        };\n      } catch (clipboardError) {\n        console.error('Failed to copy encryption key:', clipboardError);\n        try {\n          window.alert(`Registration successful!\\n\\nPlease copy and save your encryption key:\\n${key}`);\n        } catch (e) {\n          // no-op\n        }\n        return { \n          success: true, \n          message: `Registration successful! Please copy and save your encryption key: ${key}`,\n          encryptionKey: key\n        };\n      }\n    } catch (error) {\n      console.error('Registration failed:', error);\n      return { \n        success: false, \n        message: error instanceof Error ? error.message : 'Registration failed. Please try again.'\n      };\n    } finally {\n      setIsLoading(false);\n    }\n  }, [wallet.account]);\n\n  const value: WalletContextType = {\n    wallet,\n    isRegistered,\n    userProfile,\n    isLoading,\n    error,\n    encryptionKey,\n    connectWallet,\n    disconnectWallet,\n    registerUser,\n    getEncryptionKey: getEncryptionKeyFromState,\n    validateEncryptionKey,\n    getStoredFiles,\n    storeFile,\n    uploadFile,\n    downloadFile: async (fileId: string, key: string) => {\n      // Implement download file logic here\n      console.log('Downloading file:', fileId, 'with key:', key);\n    },\n    deleteStoredFile,\n  };\n\n  return (\n    <WalletContext.Provider value={value}>\n      {children}\n    </WalletContext.Provider>\n  );\n};\n\nexport const useWallet = (): WalletContextType => {\n  const context = useContext(WalletContext);\n  if (context === undefined) {\n    throw new Error('useWallet must be used within a WalletProvider');\n  }\n  return context;\n};\n\n// Extend Window interface for TypeScript\ndeclare global {\n  interface Window {\n    ethereum?: any;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}