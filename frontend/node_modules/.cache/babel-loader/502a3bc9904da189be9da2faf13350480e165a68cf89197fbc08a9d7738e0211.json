{"ast":null,"code":"import CryptoJS from'crypto-js';import{saveAs}from'file-saver';// Generate a random encryption key for the user\nexport const generateEncryptionKey=()=>{return CryptoJS.lib.WordArray.random(256/8).toString(CryptoJS.enc.Hex);};// Encrypt a file using AES\nexport const encryptFile=async(file,key)=>{console.log('[cryptoUtils] Starting file encryption...',{fileName:file.name,fileSize:file.size,fileType:file.type,keyLength:key===null||key===void 0?void 0:key.length});return new Promise((resolve,reject)=>{if(!file){const error=new Error('No file provided');console.error('[cryptoUtils]',error.message);return reject(error);}if(!key){const error=new Error('No encryption key provided');console.error('[cryptoUtils]',error.message);return reject(error);}const reader=new FileReader();reader.onload=event=>{try{var _event$target;console.log('[cryptoUtils] File read successfully');if(!((_event$target=event.target)!==null&&_event$target!==void 0&&_event$target.result)){const error=new Error('Failed to read file: No result from FileReader');console.error('[cryptoUtils]',error.message);return reject(error);}console.log('[cryptoUtils] Converting file to WordArray...');const fileData=event.target.result;const wordArray=CryptoJS.lib.WordArray.create(fileData);console.log('[cryptoUtils] Encrypting file data...');const encrypted=CryptoJS.AES.encrypt(wordArray.toString(CryptoJS.enc.Base64),key);console.log('[cryptoUtils] File encrypted, creating metadata...');const metadata={name:file.name,originalName:file.name,type:file.type,mimeType:file.type,size:file.size,lastModified:file.lastModified};const result={encryptedData:encrypted.toString(),metadata};console.log('[cryptoUtils] Encryption completed successfully');resolve(result);}catch(error){console.error('[cryptoUtils] Error during encryption:',error);reject(error);}};reader.onerror=error=>{console.error('[cryptoUtils] FileReader error:',error);reject(new Error(\"Failed to read file: \".concat(error)));};reader.onabort=()=>{const error=new Error('File reading was aborted');console.error('[cryptoUtils]',error.message);reject(error);};console.log('[cryptoUtils] Starting file read...');reader.readAsArrayBuffer(file);});};// Decrypt a file\nexport const decryptFile=async(encryptedFile,key)=>{try{const decrypted=CryptoJS.AES.decrypt(encryptedFile.encryptedData,key);const decryptedBase64=decrypted.toString(CryptoJS.enc.Utf8);// Convert base64 to ArrayBuffer\nconst binaryString=window.atob(decryptedBase64);const len=binaryString.length;const bytes=new Uint8Array(len);for(let i=0;i<len;i++){bytes[i]=binaryString.charCodeAt(i);}return new Blob([bytes],{type:encryptedFile.metadata.type});}catch(error){console.error('Decryption failed:',error);throw new Error('Failed to decrypt file. Please check your encryption key.');}};// Save decrypted file to user's device\nexport const saveDecryptedFile=(decryptedBlob,originalName)=>{saveAs(decryptedBlob,originalName);};// IndexedDB helper for storing encrypted payloads non-volatilely\nconst DB_NAME='bsciam_db';const DB_STORE='files';export const idbOpen=()=>{return new Promise((resolve,reject)=>{const request=indexedDB.open(DB_NAME,1);request.onupgradeneeded=()=>{const db=request.result;if(!db.objectStoreNames.contains(DB_STORE)){db.createObjectStore(DB_STORE,{keyPath:'id'});}};request.onsuccess=()=>resolve(request.result);request.onerror=()=>reject(request.error);});};export const idbPutEncrypted=async(id,encryptedData)=>{const db=await idbOpen();await new Promise((resolve,reject)=>{const tx=db.transaction(DB_STORE,'readwrite');const store=tx.objectStore(DB_STORE);store.put({id,encryptedData});tx.oncomplete=()=>resolve();tx.onerror=()=>reject(tx.error);});db.close();};export const idbGetEncrypted=async id=>{const db=await idbOpen();const result=await new Promise((resolve,reject)=>{const tx=db.transaction(DB_STORE,'readonly');const store=tx.objectStore(DB_STORE);const req=store.get(id);req.onsuccess=()=>resolve(req.result);req.onerror=()=>reject(req.error);});db.close();return(result===null||result===void 0?void 0:result.encryptedData)||null;};// Generate a deterministic key from user's wallet address and a passphrase\nexport const generateDeterministicKey=(walletAddress,passphrase)=>{const salt=CryptoJS.SHA256(walletAddress).toString();const key=CryptoJS.PBKDF2(passphrase,salt,{keySize:256/32,iterations:1000});return key.toString();};","map":{"version":3,"names":["CryptoJS","saveAs","generateEncryptionKey","lib","WordArray","random","toString","enc","Hex","encryptFile","file","key","console","log","fileName","name","fileSize","size","fileType","type","keyLength","length","Promise","resolve","reject","error","Error","message","reader","FileReader","onload","event","_event$target","target","result","fileData","wordArray","create","encrypted","AES","encrypt","Base64","metadata","originalName","mimeType","lastModified","encryptedData","onerror","concat","onabort","readAsArrayBuffer","decryptFile","encryptedFile","decrypted","decrypt","decryptedBase64","Utf8","binaryString","window","atob","len","bytes","Uint8Array","i","charCodeAt","Blob","saveDecryptedFile","decryptedBlob","DB_NAME","DB_STORE","idbOpen","request","indexedDB","open","onupgradeneeded","db","objectStoreNames","contains","createObjectStore","keyPath","onsuccess","idbPutEncrypted","id","tx","transaction","store","objectStore","put","oncomplete","close","idbGetEncrypted","req","get","generateDeterministicKey","walletAddress","passphrase","salt","SHA256","PBKDF2","keySize","iterations"],"sources":["F:/Final Year Project/Project Implementation/frontend/src/utils/cryptoUtils.ts"],"sourcesContent":["import CryptoJS from 'crypto-js';\nimport { saveAs } from 'file-saver';\nimport { FileMetadata, EncryptedFile } from '../types';\n\n// Generate a random encryption key for the user\nexport const generateEncryptionKey = (): string => {\n  return CryptoJS.lib.WordArray.random(256/8).toString(CryptoJS.enc.Hex);\n};\n\n// Encrypt a file using AES\nexport const encryptFile = async (\n  file: File, \n  key: string\n): Promise<EncryptedFile> => {\n  console.log('[cryptoUtils] Starting file encryption...', { \n    fileName: file.name, \n    fileSize: file.size,\n    fileType: file.type,\n    keyLength: key?.length \n  });\n\n  return new Promise((resolve, reject) => {\n    if (!file) {\n      const error = new Error('No file provided');\n      console.error('[cryptoUtils]', error.message);\n      return reject(error);\n    }\n\n    if (!key) {\n      const error = new Error('No encryption key provided');\n      console.error('[cryptoUtils]', error.message);\n      return reject(error);\n    }\n\n    const reader = new FileReader();\n    \n    reader.onload = (event) => {\n      try {\n        console.log('[cryptoUtils] File read successfully');\n        \n        if (!event.target?.result) {\n          const error = new Error('Failed to read file: No result from FileReader');\n          console.error('[cryptoUtils]', error.message);\n          return reject(error);\n        }\n        \n        console.log('[cryptoUtils] Converting file to WordArray...');\n        const fileData = event.target.result as ArrayBuffer;\n        const wordArray = CryptoJS.lib.WordArray.create(fileData as any);\n        \n        console.log('[cryptoUtils] Encrypting file data...');\n        const encrypted = CryptoJS.AES.encrypt(\n          wordArray.toString(CryptoJS.enc.Base64),\n          key\n        );\n\n        console.log('[cryptoUtils] File encrypted, creating metadata...');\n        const metadata: FileMetadata = {\n          name: file.name,\n          originalName: file.name,\n          type: file.type,\n          mimeType: file.type,\n          size: file.size,\n          lastModified: file.lastModified\n        };\n\n        const result = {\n          encryptedData: encrypted.toString(),\n          metadata\n        };\n\n        console.log('[cryptoUtils] Encryption completed successfully');\n        resolve(result);\n      } catch (error) {\n        console.error('[cryptoUtils] Error during encryption:', error);\n        reject(error);\n      }\n    };\n\n    reader.onerror = (error) => {\n      console.error('[cryptoUtils] FileReader error:', error);\n      reject(new Error(`Failed to read file: ${error}`));\n    };\n\n    reader.onabort = () => {\n      const error = new Error('File reading was aborted');\n      console.error('[cryptoUtils]', error.message);\n      reject(error);\n    };\n\n    console.log('[cryptoUtils] Starting file read...');\n    reader.readAsArrayBuffer(file);\n  });\n};\n\n// Decrypt a file\nexport const decryptFile = async (\n  encryptedFile: EncryptedFile, \n  key: string\n): Promise<Blob> => {\n  try {\n    const decrypted = CryptoJS.AES.decrypt(encryptedFile.encryptedData, key);\n    const decryptedBase64 = decrypted.toString(CryptoJS.enc.Utf8);\n    \n    // Convert base64 to ArrayBuffer\n    const binaryString = window.atob(decryptedBase64);\n    const len = binaryString.length;\n    const bytes = new Uint8Array(len);\n    \n    for (let i = 0; i < len; i++) {\n      bytes[i] = binaryString.charCodeAt(i);\n    }\n    \n    return new Blob([bytes], { type: encryptedFile.metadata.type });\n  } catch (error) {\n    console.error('Decryption failed:', error);\n    throw new Error('Failed to decrypt file. Please check your encryption key.');\n  }\n};\n\n// Save decrypted file to user's device\nexport const saveDecryptedFile = (\n  decryptedBlob: Blob, \n  originalName: string\n): void => {\n  saveAs(decryptedBlob, originalName);\n};\n\n// IndexedDB helper for storing encrypted payloads non-volatilely\nconst DB_NAME = 'bsciam_db';\nconst DB_STORE = 'files';\n\nexport const idbOpen = (): Promise<IDBDatabase> => {\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open(DB_NAME, 1);\n    request.onupgradeneeded = () => {\n      const db = request.result;\n      if (!db.objectStoreNames.contains(DB_STORE)) {\n        db.createObjectStore(DB_STORE, { keyPath: 'id' });\n      }\n    };\n    request.onsuccess = () => resolve(request.result);\n    request.onerror = () => reject(request.error);\n  });\n};\n\nexport const idbPutEncrypted = async (id: string, encryptedData: string): Promise<void> => {\n  const db = await idbOpen();\n  await new Promise<void>((resolve, reject) => {\n    const tx = db.transaction(DB_STORE, 'readwrite');\n    const store = tx.objectStore(DB_STORE);\n    store.put({ id, encryptedData });\n    tx.oncomplete = () => resolve();\n    tx.onerror = () => reject(tx.error);\n  });\n  db.close();\n};\n\nexport const idbGetEncrypted = async (id: string): Promise<string | null> => {\n  const db = await idbOpen();\n  const result = await new Promise<any>((resolve, reject) => {\n    const tx = db.transaction(DB_STORE, 'readonly');\n    const store = tx.objectStore(DB_STORE);\n    const req = store.get(id);\n    req.onsuccess = () => resolve(req.result);\n    req.onerror = () => reject(req.error);\n  });\n  db.close();\n  return result?.encryptedData || null;\n};\n\n// Generate a deterministic key from user's wallet address and a passphrase\nexport const generateDeterministicKey = (\n  walletAddress: string, \n  passphrase: string\n): string => {\n  const salt = CryptoJS.SHA256(walletAddress).toString();\n  const key = CryptoJS.PBKDF2(passphrase, salt, {\n    keySize: 256/32,\n    iterations: 1000\n  });\n  return key.toString();\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}